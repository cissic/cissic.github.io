# ____________________________________________________________________________78

#+TITLE: Initialization files setup in Emacs
#+DESCRIPTION: 
#+AUTHOR: cissic
#+DATE: <2022-12-27 Tue>
#+TAGS: emacs packages
#+OPTIONS: toc:nil
#+OPTIONS: -:nil

* {{{title}}}
:PROPERTIES:
:PRJ-DIR: ./2022-12-27-init-and-setup-Emacs/
:END:

** Problem description
The aim of this post is to finally have clean and tidy Emacs initialization file.
After some time of battling with Emacs with the use of 
find-and-copy-snippets-from-internet I decided I had achieved sufficient level of 
experience to rewrite init.el from the scratch.
In the post I'm going to implement the following rules:

1. Installation/Updating of packages is perfomed in separate file 
   ~install-packages.el~ (abbreviation for =install or upgrage packages=) which is intended to be executed every now and then,
   while Emacs initialization is done in ~init.el~.
2. I'm not going to use ~use-package~ since I still don't get it well. What is
    more, according to [[https://emacs.stackexchange.com/questions/44266/require-vs-package-initialize][this post]] ~use-package~ is just 
   a fancier way of doing things that can be done in vanilla Emacs.
   # it's still a bit to complicated for me.
3. The style of init.el presented on [[https://docs.freebsd.org/en/books/developers-handbook/tools/#emacs][this page]] is something that seems to 
   look nice and I'm going to implement this approach.
4. I'm not going to use multi-init-files approach presented ... somewhere 
   I saw some time ago and I'm unable to locate it now... 
   As for now I think all-setup-in-one-file approach means less clutter.
5. I want to do things in emacsian way. So most of the comments are going to be
   included in this org file. ~install-packages.el~ and ~init.el~ will be tangled
   from it: ~C-c C-v t~. If this shortcut does not work (for plain emacs 27.1
   installation tangling didn't work out of the box so I needed to load 
   ~ox~ package: 
   -> ~M-x eval-expression~ 
   -> ~(require 'ox)~ )

   There is an optional way of approaching this point presented 
   [[http://gewhere.github.io/orgmode-emacs-init-file][here]]. It comes down to extracting ~emacs-lisp~ source snippets directly
   from an .org file when evaluating ~init.el~. I have no idea whether there are
   any relevant differences between both approaches.


*** Sources worth further reading
- https://ruzkuku.com/emacs.d.html#org804158b - with a list of other useful
  pages with configurations
 
- https://docs.freebsd.org/en/books/developers-handbook/tools/#emacs

- https://karthinks.com/software/batteries-included-with-emacs/
- https://karthinks.com/software/more-batteries-included-with-emacs/
 
- https://stackoverflow.com/questions/5500035/set-custom-keybinding-for-specific-emacs-mode
- https://tuhdo.github.io/emacs-tutor3.html
- https://karthinks.com



**** Latex (not interesting after getting used to org?)
https://karthinks.com/software/latex-input-for-impatient-scholars/


** Installation/upgrade script
This script is meant to (re-)install/prepare/upgrade Emacs packages in order
to have fully working Emacs environment.  

This is an installation (or upgrade) script to keep installation commands 
outside init.el, in order to have everything clean and tidy (for details and 
discussion [[https://stackoverflow.com/questions/55038594/setting-up-emacs-on-new-machine-with-init-el-and-package-installation][check this]]).
Each time this script is run, the packages are not only installed but also
upgraded. Thus, it might happen that a new version of some package
breaks your installation. In order to prevent this troublesome situation
it's better to keep whole .emacs.d directory as a git repository and
make a commit before executing this script. Then, in case any problems
you can go back to restore properly working emacs installation.

Before running this script you should have git repository initialized in emacs
directory.
The repository should contain the following content:
- init.el
- install-packages.el
- elpa/
- .gitignore
- ...

Synchronization of the local repository with the remote one is not
performed in this script. It should be performed explicitely by the user
in a convenient time.

*** Preparation

First, there is a configuration line. The user needs to set the directory where Emacs initialization files are located (I know in new Emacs there exist some 
variable for this but a bit of redundancy won't do much harm).

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes :exports none

;; ____________________________________________________________________________78
;; install-mb-packages.el
;; The full description of what is done in this file is included in 
;; accompanying .org file (configuring-and-installing-emacs.org).

;; Path to your Emacs directory:
(setq my-emacs-dir "~/.emacs.d/")
;;;; (let (my-emacs-dir "~/.emacs.d/"))

#+end_src

Each time this script is run, the packages are not only installed but also
upgraded. Thus, it might happen that a new version of some package
breaks your installation. In order to prevent this troublesome situation
it's better to keep whole .emacs.d directory as a git repository and
make a commit before executing this script. Then, in case any problems
you can go back to restore properly working emacs installation.
Before running this script you should have a git repository initialized in emacs
directory and git itself installed in the system (see Sec. [[dependencies-section]]).
Synchronization of the local repository with the remote one is not
performed in this script. It should be performed explicitely by the user
in a convenient time.

In order to make a git commit from within elisp script I followed [[https://emacs.stackexchange.com/questions/48954/the-elisp-function-to-run-the-shell-command-in-specific-file-path][this post]].

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes
;; Make a git commit of your repository.
;; 
(let ((default-directory my-emacs-dir)) ; run command `git add -u` in the context of my-emacs-dir
  (shell-command "git add -u"))
(let ((default-directory my-emacs-dir)) ; run command `git commmit` in the context of my-emacs-dir
  (shell-command
   "git commit -m 'Precautionary commit before running install-mb-packages.el'"))
#+end_src

Perform [[https://emacs.stackexchange.com/questions/44266/require-vs-package-initialize][package initialization]], only for Emacs < 27.1, since in Emacs 27.1
~package-initialize~ is executed automatically, before
loading the init file ([[https://www.masteringemacs.org/article/whats-new-in-emacs-27-1][see here]]).

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes

(when (< emacs-major-version 27)
  (package-initialize)) ;  set up the load-paths and autoloads for installed packages
(setq package-check-signature nil)

#+end_src

# ____________________________________________________________________________78
then declare repositories where emacs packages can be found. It used to be more  
addresses here, something like:

#+begin_src emacs-lisp 

(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")  ;; default value of package-archives in Emacs 27.1
        ; ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
	("melpa-stable" . "http://stable.melpa.org/packages/")
	; ("org" . "https://orgmode.org/elpa/")    ;;; removed as a way of dealing with https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o
	))
#+end_src

but, at the time of writing this (Jan, 2023), the biggest, the freshest etc. 
repository is ~melpa~ and it is advised to work with it. ~Marmalade~ is 
outdated, and I also needed to get rid of ~orgmode~ as a remedy for 
[[https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o][some problem]] ([[https://www.reddit.com/r/emacs/comments/9rj5ou/comment/e8iizni/?utm_source=share&utm_medium=web2x&context=3][BTW]]).
So now my list of repositories looks as follows: 

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

;;first, declare repositories
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")  ;; default value of package-archives in Emacs 27.1
        ("melpa" . "https://melpa.org/packages/")
	("melpa-stable" . "http://stable.melpa.org/packages/")
	))

#+end_src

Now, synchronize your data: download descriptions of ELPA packages 
and update the cache with current versions of
packages kept in remote repositories:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")
;; Refresh the repositories to have the newest versions of the packages
(package-refresh-contents)

#+end_src

In Emacs 27.1 it [[https://emacs.stackexchange.com/a/44287][shouldn't be necessary to use]]
~(require 'packagename)~, so I can leave out the following code:

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

#+begin_src emacs-lisp 
;; ;; Comment out if you've already loaded this package...
;; (require 'cl-lib)       ;; built-in in 27.1
;; (require 'package)      ;; built-in in 27.1
#+end_src


*** The main part of the script - list the packages
I used to have ~(defvar my-packages ...~ instead of ~(setq my-packages ...~ 
below but... *Do not* use ~defvar~ for declaring a list of packages to be installed!
If the variable is already defined 
[[https://emacs.stackexchange.com/questions/29710/whats-the-difference-between-setq-and-defvar][~defvar~ does nothing]] with it so it does 
not refresh a list after editing it and thus it prevents from the 
expected way of reevaluating of the ~package-install.el~.


The main point of the file. Set the list of packages to be installed
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")
(setq my-packages
  '(
#+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

    ;dockerfile-mode    
    ;flycheck
    ;flycheck-pos-tip
    ;; google-this
    ido
    ; jedi
    magit
    markdown-mode
    ;matlab-mode 
    modus-themes ; theme by Protesilaos Stavrou
    ;moe-theme ; https://github.com/kuanyui/moe-theme.el
    ;mh
    ;ob-async
    ;; org   ; ver. 9.3  built-in in Emacs 27.1
    org-ac
    ;org-download
    ;org-mime
    ;org-ref
    org-special-block-extras
    ;ox-gfm
    ;ox-pandoc
    ; ox-ipynb -> manual-download
    ;pandoc-mode
    ;pdf-tools
    ;projectile
    ;pyenv-mode
    ;Pylint  ; zeby dzialal interpreter python'a po:  C-c C-c 
    ;rebox2
    ;recentf
    ;session-async
    ;shell-pop
    smex
    ; tramp  ; ver. 2.4.2 built-in in Emacs 27.1
    ;tao-theme ; https://github.com/11111000000/tao-theme-emacs
    ;treemacs
    ;use-package
    ;workgroups
    ;w3m
    )
  ;; "A list of packages to be installed at Emacs launch."
  )

#+end_src

And finally, perform the installation/upgrade of packages and 
print an information message.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
           when (not (package-installed-p p)) do (cl-return nil)
           finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; ; (jedi:install-server)

(message "All done in install-packages.")


#+end_src


*** Problems/errors during installation of packages
No problems so far...


** My init.el

There's something like ~early-init.el~ in modern versions of Emacs that is intended
to speed up the launching process, however I'm not going to use this approach as
for now. An interesting discussion about this can be found [[https://www.reddit.com/r/emacs/comments/enmbv4/earlyinitel_reduce_init_time_about_02_sec_and/][here]].

*** A note:
[[https://stackoverflow.com/questions/12224575/emacs-init-el-file-doesnt-load][When Emacs ~init.el~ does not load at startup]].


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :mkdirp yes :exports none
;; ____________________________________________________________________________78
;; init.el
;; The full description of what is done in this file is included in 
;; accompanying .org file (configuring-and-installing-emacs.org).

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")
#+end_src

*** Global emacs customization

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Global emacs customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

Here are global Emacs customization. 
If necessary some useful infomation or link is added to the customization.

**** Self-descriptive oneliners <<oneliners>>

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(auto-revert-mode 1)       ; Automatically reload file from a disk after change

(delete-selection-mode 1)  ; Replace selected text

(show-paren-mode 1)        ; Highlight matching parenthesis

(global-linum-mode 1)      ; Enable line numbering

(setq line-number-mode t)  ; Show line number

(setq column-number-mode t); Show column number

(define-key global-map (kbd "RET") 'newline-and-indent) ; Auto-indent new lines

(desktop-save-mode 1)      ; Save windows layout on closing

#+end_src

**** Emacs shell history from previous sessions
[[https://www.emacswiki.org/emacs/SaveHist][Emacs wiki page]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(savehist-mode 1)          ; Save history for future sessions
#+end_src

**** Easily restore previous/next window layout 
a
- undo = previous window view
 : C-c left  
- redo (undo undo)
 : C-c right 
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(winner-mode 1)            ; Toggle between previous window layouts
#+end_src


**** Line truncation

There are some other ways of [[https://stackoverflow.com/questions/7577614/emacs-truncate-lines-in-all-buffers][truncating]]:
#+begin_example
(setq-default truncate-lines t) ; ugly way of truncating
#+end_example
or
#+begin_example
; fancier way of truncating (word truncating) THIS DOES NOT WORK!!!
(setq-default global-visual-line-mode t) 
#+end_example
however I didn't find them pretty and finally this command is useful:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(global-visual-line-mode t) ; Truncate lines 
#+end_src


**** Prevent from deselecting text after M-w copying 
[[https://www.reddit.com/r/emacs/comments/1vdumz/emacs_to_keep_selection_after_copy/][Link]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Do not deselect after M-w copying -> 
 (defadvice kill-ring-save (after keep-transient-mark-active ())
   "Override the deactivation of the mark."
   (setq deactivate-mark nil))
 (ad-activate 'kill-ring-save)
;; <- Do not deselect after M-w copying
#+end_src

**** Setting default font

To get the list of available fonts:
Type the following in the *scratch* buffer, and press ~C-j~ at the end of it:
   ~(font-family-list)~
You may need to expand the result to see all of them, by hitting enter on 
the =...= at the end.
([[https://stackoverflow.com/questions/13747749/font-families-for-emacs][Source]]).

The font of my choice is:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")  
(set-frame-font "liberation mono 11" nil t) ; Set default font
#+end_src

**** Time and calendar 

***** DONE Locale for names of days of the week in org-mode
# Setting default locale
Setting names of the days of the week and months to arbitrarily language:
[[https://emacs.stackexchange.com/questions/50543/insert-date-using-a-calendar-where-other-language-rather-than-english-is-desir][Link 1]],
[[https://emacs.stackexchange.com/questions/19602/org-calendar-change-date-language/19611#19611][Link 2]]
# ;; (setq calendar-week-start-day 1
# ;;           calendar-day-name-array ["Domenica" "Lunedì" "Martedì" "Mercoledì" 
# ;;                                    "Giovedì" "Venerdì" "Sabato"]
# ;;           calendar-month-name-array ["Gennaio" "Febbraio" "Marzo" "Aprile" "Maggio"
# ;;                                      "Giugno" "Luglio" "Agosto" "Settembre" 
# ;;                                      "Ottobre" "Novembre" "Dicembre"])
# ;; (setq calendar-week-start-day 1
# ;;       calendar-day-name-array["Sunday" "Monday" "Tuesday"
# ;; 			      "Wednesday" "Thursday" "Friday" "Saturday"]
# ;;       calendar-month-name-array ["January" "February" "March" "April" "May" "June"
# ;;    			         "July" "August" "September" "October" "November" "December"])
[[https://emacs.stackexchange.com/questions/50543/insert-date-using-a-calendar-where-other-language-rather-than-english-is-desir][Link 1]]
# ;;(let ((system-time-locale "en_GB.UTF-8")
# ;;      (time (org-read-date nil 'to-time nil "Date:  ")))
# ;;  (insert (format-time-string "(KW%W) (%A) %d. %B %Y" time)))(KW37) (poniedziałek) 12. września 2022
# ;; => (KW19) (Samstag) 18. Mai 2019
[[https://stackoverflow.com/questions/28913294/emacs-org-mode-language-of-time-stamps][Link 3]]
# ;; System locale to use for formatting time values.
# (setq system-time-locale "C")         ; Make sure that the weekdays in the
#                                       ; time stamps of your Org mode files and
#                                       ; in the agenda appear in English.


The best method I found working for my purposes is:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(setq system-time-locale "C")         ; Force Emacs to use English timestamps
#+end_src
It makes Emacs use English language and not the system localization language
when inserting weekdays abreviations in org-mode timestamps and in org-agenda.

***** DONE Calendar
Inserting the date from the calendar. 
Here's the way how one can insert date in org-mode by hitting ~C-c .~
choosing the day and hitting ~RET~.

The above shortcuts are listed in ~Scroll~ menu item which is visible in menu bar,
when you're in Calendar buffer.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Calendar ->
(defun calendar-insert-date ()
  "Capture the date at point, exit the Calendar, insert the date."
  (interactive)
  (seq-let (month day year) (save-match-data (calendar-cursor-to-date))
    (calendar-exit)
    (insert (format "%d-%02d-%02d" year month day))))
#+end_src
Warning! Here, instead of using:
#+begin_example
(define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)
#+end_example
it's better to define the action as

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(eval-after-load "calendar"
  `(progn
     (define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)))
;; <- Calendar
#+end_src

Otherwise, you may get ~calendar-mode-map is void~ error, 
if ~calendar-mode-map~ it's not loaded at the moment of executing the command ([[https://emacs.stackexchange.com/questions/3548/how-to-change-key-bindings-for-calendar-mode][Link]]).


Moving in calendar buffer is like follows:
| Move by  | Backward | Forward   |
|----------+----------+-----------|
| a day    | S-<left> | S-<right> |
| a week   | S-<up>   | S-<down>  |
| a month  | >        | <         |
| 3 months | M-v      | C-v       |
| a year   | 4 M-v    | 4 C-v     |
|----------+----------+-----------|


**** Easy moving between windows
It is managed by [[https://www.emacswiki.org/emacs/WindMove][WindMove package]] that is built-in in Emacs.
The default keybindings of this package is ~Shift arrow~, which sometimes
may be inconvenient (there are conflicts for example in org-mode, other 
packages that conflict with org are [[https://orgmode.org/manual/Conflicts.html][listed here]]).
That is why it's better to remap those keybindings to other 
combination (~Super-Key-<arrow>~ in the code below). 

According to [[https://www.emacswiki.org/emacs/WindMove][package's wikipage]] there exist some problem with the package,
namely:
"When you run for instance windmove-left and there is no window on the left,
 windmove will throw exception (and if you have debug-on-error enabled) 
you will see Debugger complaining."

Proposed workaround requires ~cl~ package, which unfortunately is
[[https://github.com/kiwanami/emacs-epc/issues/35][deprecated in Emacs 27.1]] (The workaround worked in Emacs < 27).
With the use of 
[[https://emacs.stackexchange.com/questions/15189/alternative-to-lexical-let][this post]] and 
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][this part of emacs manual]] I sort of solved the problem and with the 
following code Emacs does not throw warnings or errors.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; windmove ->
;; Easy moving between windows
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  
  (eval-when-compile (require 'cl))
  (setq lexical-binding t)
  
  (defun ignore-error-wrapper (fn)
    "Funtion return new function that ignore errors.
     The function wraps a function with `ignore-errors' macro."
    (lexical-let ((fn fn))
      (lambda ()
        (interactive)
        (ignore-errors
          (funcall fn)))))
  
  ;; setting windmove-default-keybindings to super-<arrow> in order
  ;; to avoid org-mode conflicts
  (global-set-key (kbd "s-<left>") (ignore-error-wrapper 'windmove-left))
  (global-set-key (kbd "s-<right>") (ignore-error-wrapper 'windmove-right))
  (global-set-key (kbd "s-<up>") (ignore-error-wrapper 'windmove-up))
  (global-set-key (kbd "s-<down>") (ignore-error-wrapper 'windmove-down))
;; <- windmove
#+end_src

**** Easy windows resize
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Easy windows resize ->
  (define-key global-map (kbd "C-s-<left>") 'shrink-window-horizontally)
  (global-set-key        (kbd "C-s-<right>") 'enlarge-window-horizontally)
  (global-set-key        (kbd "C-s-<down>") 'shrink-window)
  (global-set-key        (kbd "C-s-<up>") 'enlarge-window)
;; <- Easy windows resize 
#+end_src

**** ido-mode
They say that ~ido~ is a [[https://www.masteringemacs.org/article/introduction-to-ido-mode][powerful package]] and you should have it enabled...
I'm not going to argue with that, yet I haven't studied much its capabilities.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; ido-mode ->
  (ido-mode 1)          
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)  ; ido-mode for file searching
;; <- ido-mode
#+end_src

**** smex
This package is installed because I was inspired by some post. 
Just for tests.
https://github.com/nonsequitur/smex/

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; smex ->
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) 
;; <- smex
#+end_src


**** Recently opened files
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Recently opened files ->
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 50)
  ;; in original emacs this binding is for "Find file read-only"
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
;; <- Recently opened files
#+end_src

*** Org customization
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Org customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

**** Org-agenda activation
 https://orgmode.org/manual/Activation.html#Activation

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; org-agenda activation
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

**** Org-special-block-extras
[[http://alhassy.com/org-special-block-extras/][Author's page]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; **** org-special-block-extras -> 
(add-hook #'org-mode-hook #'org-special-block-extras-mode)
;; <- **** org-special-block-extras 
#+end_src

**** Tailoring org-mode to markdown export
When exporting to markdown I want to add some keywords in a special format to
the preamble of .md file.
[[https://emacs.stackexchange.com/questions/74505/how-can-i-add-specific-text-to-the-content-generated-by-org-mode-export-to-mark#74513][How to do that is descried here.]]


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; **** org-to-markdown exporter customization  -> 

(defun org-export-md-format-front-matter ()
  (let* ((kv-alist (org-element-map (org-element-parse-buffer 'greater-element)
                       'keyword
                     (lambda (keyword)
                       (cons (intern (downcase (org-element-property :key keyword)))
                             (org-element-property :value keyword)))))
         (lines (mapcar (lambda (kw)
                          (let ((val (alist-get kw kv-alist)))
                            (format (pcase kw
                                      ('author "%s: %s")
                                      ((or 'tags 'title) "%s: '%s'")
                                      (_ "%s: %s"))
                                    (downcase (symbol-name kw))
                                    (pcase kw
                                      ('date (substring val 1 -1))
                                      (_ val)))))
                        '(author date tags title))))
    (concat "---\n" (concat (mapconcat #'identity lines "\n")) "\n---")))

(defun my/org-export-markdown-hook-function (backend)
    (if (eq backend 'md)
        (insert (org-export-md-format-front-matter) "\n")))

;; This hook should be added per file in my org posts. Unfortunately, so far I don't know
;; how to do this.
(add-hook 'org-export-before-processing-hook #'my/org-export-markdown-hook-function)

#+end_src

Besides, in order to have markdown exporter options in menu appearing after
~C-c C-e~ you need to add 
([[https://stackoverflow.com/questions/22988092/emacs-org-mode-export-markdown/22990257#22990257][Link 1]], [[https://emacs.stackexchange.com/questions/4279/exporting-from-org-mode-to-markdown][Link 2]]):

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

(require 'ox-md nil t)

;; <- **** org-to-markdown exporter customization
#+end_src



**** TODO Default org to latex exporting command

*** General global shortcuts not restricted to specific package/mode
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Useful global shortcuts (text operations)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-d") 'delete-forward-char)    ; Backspace/Insert remapping
(global-set-key (kbd "C-S-d") 'delete-backward-char) 
; (global-set-key (kbd "M-S-d") 'backward-kill-word)
(global-set-key (kbd "C-c C-e s") 'mark-end-of-sentence)

(global-set-key (kbd "C-C C-e C-w C-w") 'eww-list-bookmarks) ; Open eww bookmarks
(defun mynet ()  (interactive) (eww-list-bookmarks))
#+end_src

*** Load Emacs theme of your preference
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Emacs theme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src


**** Modus themes by Protesilaos Stavrou
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; **** Modus theme by Protesilaos Stavrou
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
- [[https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/][Author's page]]
- [[https://www.youtube.com/watch?v=JJPokfFxyFo][Youtube's tutorial]]

# ;; (setq modus-themes-headings ; this is an alist: read the manual or its doc string
# ;;       '((1 . (overline background variable-pitch 1.3))
# ;;         (2 . (rainbow overline 1.1))
# ;;         (t . (semibold))) )

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

;; Add all your customizations prior to loading the themes
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil
      modus-themes-region '(bg-only no-extend))

;; Load the theme of your choice:
(load-theme 'modus-vivendi) ;; OR (load-theme 'modus-operandi)

(setq modus-themes-headings ; this is an alist: read the manual or its doc string
      '((1 . (rainbow overline background 1.4))
        (2 . (rainbow background 1.3))
	(3 . (rainbow bold 1.2))
        (t . (semilight 1.1))))

(setq modus-themes-scale-headings t)
(setq modus-themes-org-blocks 'tinted-background)
#+end_src

*** Manually downloaded packages
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Manually downloaded packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")

;; Set location for external packages.
(add-to-list 'load-path "~/.emacs.d/manual-download/")

;; doconce -> 
(load-file "~/.emacs.d/manual-download/.doconce-mode.el")

;; activating org-mode for doconce pub files:
;; https://github.com/doconce/publish/blob/master/doc/manual/publish-user-manual.pdf
(setq auto-mode-alist
      (append '(("\\.org$" . org-mode))
              '(("\\.pub$" . org-mode))
              auto-mode-alist))
;; <- doconce

;; sunrise
(add-to-list 'load-path "~/.emacs.d/manual-download/sunrise")
(require 'sunrise)

;; midnight-commander emulation
;; (require 'mc)

;; org to ipython exporter
;;(use-package ox-ipynb
;  :load-path "~/.emacs.d/manual-download/ox-ipynb")

#+end_src


*** TODO The end

**** Workgroups (should be executed at the end of init.el)
https://tuhdo.github.io/emacs-tutor3.html

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(workgroups-mode 1)    ; session manager for emacs
#+end_src

- To save window&buffer layout as a work group:
~M-x wg-create-workgroup~ or
~C-c z C-c~

- To open an existing work group:
~M-x wg-open-workgroup~ or 
~C-c z C-v~

- To delete an existing work group:
~M-x wg-kill-workgroup~ or
~C-c z C-k~


**** Last lines
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Finishing touches
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

This way of restoring session throws some warnings and needs additional
confirmations so I give it up. Simple ~(desktop-save-mode 1)~ which is 
included [[oneliners][in the beginning of ~init.el~]] works ok.

#+begin_example
;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)   ; this line throws an error:   void
      (desktop-read)))
#+end_example

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")

;; Indicate that this file has been read at least once
(setq first-time nil)

;;; Always have several files opened at startup
;; hint: https://stackoverflow.com/a/19284395/4649238
(find-file "~/.emacs.d/init.el")
(find-file "~/.emacs.d/install-packages.el")
(find-file "~/.emacs.d/useful-shortcuts.org")

;; All done
(message "All done in init.el.")
#+end_src

** Dependencies of the presented Emacs configuration <<dependencies-section>>:
The list of external applications that this script is dependent on:
- git
- LaTeX distribution (for org to latex exporters)
  
