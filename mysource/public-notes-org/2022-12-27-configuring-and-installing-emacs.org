#+TITLE: Initialization files setup in Emacs
#+DESCRIPTION: 
#+AUTHOR: cissic
#+DATE: <2022-12-27 Tue>
#+TODO: TODO ABANDONED | DONE DEPRECATED
#+TAGS: emacs packages
#+OPTIONS: toc:nil
#+OPTIONS: -:nil



* {{{title}}
:PROPERTIES:
:PRJ-DIR: ~/.emacs.d/     
:END:
# :PROPERTIES:
# :PRJ-DIR: ./2022-12-27-init-and-setup-Emacs/
# :END:


** TL;DR
An org source of this post can be found
[[https://github.com/cissic/cissic.github.io/blob/main/mysource/public-notes-org/2022-12-27-configuring-and-installing-emacs.org][here]]. This org-file can be used to generate (tangle in Emacs nomenclature)
to scripts:
~install-packages.el~ and
~init.el~.
Place them in your ~./emacs.d~ and hope ;) they will run without
problems on your machine.


** Problem description
The aim of this post is to finally have clean and tidy Emacs initialization file.
After some time of battling with Emacs with the use of 
find-and-copy-snippets-from-internet I decided I had achieved sufficient level of 
experience to rewrite init.el from the scratch.
In the post I'm going to implement the following rules:

1. Installation/Updating of packages is perfomed in separate file 
   ~install-packages.el~ (abbreviation for =install or upgrage packages=) which is intended to be executed every now and then,
   while Emacs initialization is done in ~init.el~.
2. I'm not going to use ~use-package~ since I still don't get it well. What is
    more, according to [[https://emacs.stackexchange.com/questions/44266/require-vs-package-initialize][this post]] ~use-package~ is just 
   a fancier way of doing things that can be done in vanilla Emacs.
   # it's still a bit to complicated for me.
3. The style of init.el presented on [[https://docs.freebsd.org/en/books/developers-handbook/tools/#emacs][this page]] is something that seems to 
   look nice and I'm going to implement this approach.
4. I'm not going to use multi-init-files approach presented ... somewhere 
   I saw some time ago and I'm unable to locate it now... 
   As for now I think all-setup-in-one-file approach means less clutter.
5. I want to do things in emacsian way. So most of the comments are going to be
   included in this org file. ~install-packages.el~ and ~init.el~ will be tangled
   from it: ~C-c C-v t~. If this shortcut does not work (for plain emacs 27.1
   installation tangling didn't work out of the box so I needed to load 
   ~ox~ package: 
   -> ~M-x eval-expression~ 
   -> ~(require 'ox)~ )

   There is an optional way of approaching this point presented 
   [[http://gewhere.github.io/orgmode-emacs-init-file][here]]. It comes down to extracting ~emacs-lisp~ source snippets directly
   from an .org file when evaluating ~init.el~. I have no idea whether there are
   any relevant differences between both approaches.


*** Sources worth further reading
- https://ruzkuku.com/emacs.d.html#org804158b - with a list of other useful
  pages with configurations
 
- https://docs.freebsd.org/en/books/developers-handbook/tools/#emacs

- https://karthinks.com/software/batteries-included-with-emacs/
- https://karthinks.com/software/more-batteries-included-with-emacs/
 
- https://stackoverflow.com/questions/5500035/set-custom-keybinding-for-specific-emacs-mode
- https://tuhdo.github.io/emacs-tutor3.html
- https://karthinks.com



**** Latex (not interesting after getting used to org?)
https://karthinks.com/software/latex-input-for-impatient-scholars/


** Installation/upgrade script

This script is meant to (re-)install/prepare/upgrade Emacs packages in order
to have fully working Emacs environment.  

This is an installation (or upgrade) script to keep installation commands 
outside init.el, in order to have everything clean and tidy (for details and 
discussion [[https://stackoverflow.com/questions/55038594/setting-up-emacs-on-new-machine-with-init-el-and-package-installation][check this]]).
Each time this script is run, the packages are not only installed but also
upgraded. Thus, it might happen that a new version of some package
breaks your installation. In order to prevent this troublesome situation
it's better to keep whole .emacs.d directory as a git repository and
make a commit before executing this script. Then, in case any problems
you can go back to restore properly working emacs installation.

Before running this script you should have git repository initialized in emacs
directory.
The repository should contain the following content:
- init.el
- install-packages.el
- elpa/
- .gitignore
- ...

Synchronization of the local repository with the remote one is not
performed in this script. It should be performed explicitely by the user
in a convenient time.

*** Preparation

First, there is a configuration line. The user needs to set the directory where Emacs initialization files are located (I know in new Emacs there exist some 
variable for this but a bit of redundancy won't do much harm).

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes :exports none

    ;; ____________________________________________________________________________78
    ;; install-mb-packages.el
    ;; The full description of what is done in this file is included in 
    ;; accompanying .org file (configuring-and-installing-emacs.org) that is
    ;; described here:
    ;; https://cissic.github.io/posts/configuring-and-installing-emacs/


    ;; Path to your Emacs directory:
    (setq my-emacs-dir "~/.emacs.d/")
    ;;;; (let (my-emacs-dir "~/.emacs.d/"))

#+end_src

Each time this script is run, the packages are not only installed but also
upgraded. Thus, it might happen that a new version of some package
breaks your installation. In order to prevent this troublesome situation
it's better to keep whole .emacs.d directory as a git repository and
make a commit before executing this script. Then, in case any problems
you can go back to restore properly working emacs installation.
Before running this script you should have a git repository initialized in emacs
directory and git itself installed in the system (see Sec. [[dependencies-section]]).
Synchronization of the local repository with the remote one is not
performed in this script. It should be performed explicitely by the user
in a convenient time.

In order to make a git commit from within elisp script I followed [[https://emacs.stackexchange.com/questions/48954/the-elisp-function-to-run-the-shell-command-in-specific-file-path][this post]].

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes
;; Make a git commit of your repository.
;; 
(let ((default-directory my-emacs-dir)) ; run command `git add -u` in the context of my-emacs-dir
  (shell-command "git add -u"))
(let ((default-directory my-emacs-dir)) ; run command `git commmit` in the context of my-emacs-dir
  (shell-command
   "git commit -m 'Precautionary commit before running install-mb-packages.el'"))
#+end_src

Perform [[https://emacs.stackexchange.com/questions/44266/require-vs-package-initialize][package initialization]], only for Emacs < 27.1, since in Emacs 27.1
~package-initialize~ is executed automatically, before
loading the init file ([[https://www.masteringemacs.org/article/whats-new-in-emacs-27-1][see here]]).

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el") :mkdirp yes

(when (< emacs-major-version 27)
  (package-initialize)) ;  set up the load-paths and autoloads for installed packages
(setq package-check-signature nil)

#+end_src

# ____________________________________________________________________________78
then declare repositories where emacs packages can be found. There used to be more  
addresses here, something like:

#+begin_src emacs-lisp 

(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")  ;; default value of package-archives in Emacs 27.1
        ; ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
	("melpa-stable" . "http://stable.melpa.org/packages/")
	; ("org" . "https://orgmode.org/elpa/")    ;;; removed as a way of dealing with https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o
	))
#+end_src

but, at the time of writing this (Jan, 2023), the biggest, the freshest etc. 
repository is ~melpa~ and it is advised to work with it. ~Marmalade~ is 
outdated, and I also needed to get rid of ~orgmode~ as a remedy for 
[[https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o][some problem]] ([[https://www.reddit.com/r/emacs/comments/9rj5ou/comment/e8iizni/?utm_source=share&utm_medium=web2x&context=3][BTW]]).

What is more, at some point I stumbled upon the troubles with refreshing ~melpa~
repository. Even after explicit running ~(package-refresh-contents)~ I couldn't
see melpa packages in ~packages-list~.
There is quite a [[https://github.com/melpa/melpa/issues/7238][long thread]] on this problem.

What helped me was replacing
~("melpa" . "https://melpa.org/packages/")~ to
~("melpa" . "http://melpa.org/packages/")~ _and_ restarting emacs. Restarting is
important part of the procedure!

(Aside note: A way to go might also be [[https://github.com/melpa/melpa/issues/7238#issuecomment-761608049][this post]] that recommends adding
~(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")~
in your ~init.el~. This should allow to use ~https~ adresses as package archives.
I haven't check this approach but I should try this if anything goes
wrong in the future.)

So now my list of repositories looks as follows: 

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

;;first, declare repositories
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")  ;; default value of package-archives in Emacs 27.1
        ("melpa" . "http://melpa.org/packages/")
	("melpa-stable" . "http://stable.melpa.org/packages/")
	))

#+end_src

Now, synchronize your data: download descriptions of ELPA packages 
and update the cache with current versions of
packages kept in remote repositories:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")
;; Refresh the repositories to have the newest versions of the packages
(package-refresh-contents)

#+end_src

In Emacs 27.1 it [[https://emacs.stackexchange.com/a/44287][shouldn't be necessary to use]]
~(require 'packagename)~, so I can leave out the following code:

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

#+begin_src emacs-lisp 
;; ;; Comment out if you've already loaded this package...
;; (require 'cl-lib)       ;; built-in in 27.1
;; (require 'package)      ;; built-in in 27.1
#+end_src


*** The main part of the installation script - list of the packages
<<installation-script>>

I used to have ~(defvar my-packages ...~ instead of ~(setq my-packages ...~ 
below but... *Do not* use ~defvar~ for declaring a list of packages to be installed!
If the variable is already defined 
[[https://emacs.stackexchange.com/questions/29710/whats-the-difference-between-setq-and-defvar][~defvar~ does nothing]] with it so it does 
not refresh a list after editing it and thus it prevents from the 
expected way of reevaluating of the ~package-install.el~.


The main point of the file. Set the list of packages to be installed
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")
(setq my-packages
  '(
#+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")
    auctex ; in order to have reftex working
    bash-completion  
    ; counsel ; for ivy
    cdlatex
    company
    dockerfile-mode
    emacs-everywhere
    fill-column-indicator
    ;flycheck
    ;flycheck-pos-tip
    flyspell
    ;; google-this
    ido
    ; ivy
    ; jedi
    magit
    markdown-mode
    matlab-mode 
    modus-themes ; theme by Protesilaos Stavrou
    ;moe-theme ; https://github.com/kuanyui/moe-theme.el
    ;mh
    ;ob-async
    org   ; ver. 9.3  built-in in Emacs 27.1; this install version 9.6 from melpa
    org-ac
    ;org-download
    org-plus-contrib
    ;org-mime
    org-ref ; for handling org-mode references https://emacs.stackexchange.com/questions/9767/can-reftex-be-used-with-org-label
    org-special-block-extras
    ;ox-gfm
    ;ox-pandoc
    ; ox-ipynb -> manual-download
    ;pandoc-mode
    pdf-tools
    popup   ; for yasnippet
    ;projectile
    ;pyenv-mode
    ;Pylint  ; zeby dzialal interpreter python'a po:  C-c C-c 
    ;rebox2
    ;recentf
    ;session-async
    ;shell-pop
    smex
    ssh
    ; tramp  ; ver. 2.4.2 built-in in Emacs 27.1
    ;tao-theme ; https://github.com/11111000000/tao-theme-emacs
    ;treemacs
    ;use-package
    workgroups2
    ;w3m
    yasnippet
    )
  ;; "A list of packages to be installed at Emacs launch."
  )

#+end_src

And finally, perform the installation/upgrade of packages and 
print an information message.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "install-packages.el")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
           when (not (package-installed-p p)) do (cl-return nil)
           finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; ; (jedi:install-server)

(message "All done in install-packages.")


#+end_src


*** Problems/errors during installation of packages
No problems so far...


** My init.el

There's something like ~early-init.el~ in modern versions of Emacs that is intended
to speed up the launching process, however I'm not going to use this approach as
for now. An interesting discussion about this can be found [[https://www.reddit.com/r/emacs/comments/enmbv4/earlyinitel_reduce_init_time_about_02_sec_and/][here]].

*** A note:
[[https://stackoverflow.com/questions/12224575/emacs-init-el-file-doesnt-load][When Emacs ~init.el~ does not load at startup]].


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :mkdirp yes :exports none
;; ____________________________________________________________________________78
;; init.el
;; The full description of what is done in this file is included in 
;; accompanying .org file (configuring-and-installing-emacs.org). 
#+end_src


**** DEPRECATED Setting an auxiliary variable
This section is deprecated in favour of [[workgroups2-and-sessions][~workgroups2 package~]].

#+begin_src emacs-lisp
;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")
#+end_src


**** Package ~package~  initialization
In theory, in new Emacs two following lines shouldn't be required to have 
everything working fine.
However, it seems that some packages (~modus-themes~, ~workgroups2~?) cannot 
run without it when emacs commands are to be executed from command line 
without invoking Emacs 
window (Post with demonstration makefile should be published soon).

 
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
(require 'package)
(package-initialize)
#+end_src

*** Setting separate file for emacs custom entries
If you don't set the separate for custom entries, Emacs appends its code
directly into ~init.el~. To prevent this we need to define other file. 
Remember to create ~custom-file.el~ file by hand! Emacs won't create it 
for you.

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;;;; Do not use `init.el` for `custom-*` code - use `custom-file.el`.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
(setq custom-file "~/.emacs.d/custom-file.el")
#+end_src

Assuming that the code in custom-file is execute before the code
ahead of this line is not a safe assumption. So load this file
proactively.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
(load-file custom-file)
#+end_src



*** Global emacs customization

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Global emacs customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

Here are global Emacs customization. 
If necessary some useful infomation or link is added to the customization.

**** Self-descriptive oneliners <<oneliners>>

Remarks:
At around May 2023 I stopped using ~global-linum-mode~ because
of the annoying lags while typing in a buffer that occured quite
frequently, Links:
- https://github.com/jrblevin/markdown-mode/issues/181
- https://www.reddit.com/r/orgmode/comments/e7pq7k/linummode_very_slow_for_large_org_files/
- https://emacs.stackexchange.com/questions/49032/line-numbering-stick-with-linum-or-nlinum

From two possible alternatives at the time:
 ~nlinum-mode~ and ~display-line-numbers-mode~
I decided on the latter because it was built-in Emacs.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  (auto-revert-mode 1)       ; Automatically reload file from a disk after change
  (global-auto-revert-mode 1) 

  (delete-selection-mode 1)  ; Replace selected text

  (show-paren-mode 1)        ; Highlight matching parenthesis

  ; Enable line numbering
  ;; DEPRECATED, CAUSES LAGS WHEN TYPING: (global-linum-mode 1)			
  (global-display-line-numbers-mode 1) 

  (scroll-bar-mode 1)        ; Enable scrollbar
  (menu-bar-mode 1)          ; Enable menubar
  (tool-bar-mode -1)         ; Disable toolbar since it's rather useless

  (setq line-number-mode t)  ; Show line number

  (setq column-number-mode t); Show column number

  (define-key global-map (kbd "RET") 'newline-and-indent) ; Auto-indent new lines

  (if (not (daemonp))           ; if this is not a --daemon session -> see: [[emacs-everywhere]] section
     (desktop-save-mode 1)      ; Save buffers on closing and restore them at startup
  )
  (setq desktop-load-locked-desktop t) ; and don't ask for confirmation when 
			     ; opening locked desktop
  (setq desktop-save t)

  (save-place-mode t)        ; When re-entering a file, return to the place, 
			     ; where I was when I left it the last time.

#+end_src

**** Emacs shell history from previous sessions
[[https://www.emacswiki.org/emacs/SaveHist][Emacs wiki page]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(savehist-mode 1)          ; Save history for future sessions
#+end_src

**** Easily restore previous/next window layout 

- undo = previous window view
 : C-c left  
- redo (undo undo)
 : C-c right 
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(winner-mode 1)            ; Toggle between previous window layouts
#+end_src


**** Line truncation

There are some other ways of [[https://stackoverflow.com/questions/7577614/emacs-truncate-lines-in-all-buffers][truncating]]:
#+begin_example
(setq-default truncate-lines t) ; ugly way of truncating
#+end_example
or
#+begin_example
; fancier way of truncating (word truncating) THIS DOES NOT WORK!!!
(setq-default global-visual-line-mode t) 
#+end_example
however I didn't find them pretty and finally this command is useful:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(global-visual-line-mode t) ; Truncate lines 
#+end_src


**** Prevent from deselecting text after M-w copying 
[[https://www.reddit.com/r/emacs/comments/1vdumz/emacs_to_keep_selection_after_copy/][Link]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Do not deselect after M-w copying -> 
 (defadvice kill-ring-save (after keep-transient-mark-active ())
   "Override the deactivation of the mark."
   (setq deactivate-mark nil))
 (ad-activate 'kill-ring-save)
;; <- Do not deselect after M-w copying
#+end_src

**** Setting default font

To get the list of available fonts:
Type the following in the *scratch* buffer, and press ~C-j~ at the end of it:
   ~(font-family-list)~
You may need to expand the result to see all of them, by hitting enter on 
the =...= at the end.
([[https://stackoverflow.com/questions/13747749/font-families-for-emacs][Source]]).

The font of my choice is:


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; now this setting is done much lower in the code due to
;; problems with fonts in  emacsclient/daemonp instances -> see [[emacs-everywhere]]
;; (set-frame-font "liberation mono 11" nil t) ; Set default font
#+end_src

Due to  due to the  problems with fonts in =emacsclient/daemonp=
instances font is set now in the section [[emacs-everywhere]].

**** Highlight on an active window/buffer
Although the active window can be recognized
by the cursor which blinking in it, sometimes it is hard to
find in on the screen (especially if you use a colourful theme
like [[modus-theme]].

I found a [[https://stackoverflow.com/questions/33195122/highlight-current-active-window][post]] adressing this issue.
Although the accepted answer is using 
~auto-dim-other-buffers.el~
I prefer [[https://stackoverflow.com/a/33196798][this solution]] which does not rely on external package
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;Highlight an active window/buffer or dim all other windows
  
  (defun highlight-selected-window ()
    "Highlight selected window with a different background color."
    (walk-windows (lambda (w)
      (unless (eq w (selected-window)) 
	(with-current-buffer (window-buffer w)
	  (buffer-face-set '(:background "#111"))))))
    (buffer-face-set 'default))
  
    (add-hook 'buffer-list-update-hook 'highlight-selected-window)
;;
#+end_src


**** Time and calendar 

***** DONE Locale for names of days of the week in org-mode
# Setting default locale
Setting names of the days of the week and months to arbitrarily language:
[[https://emacs.stackexchange.com/questions/50543/insert-date-using-a-calendar-where-other-language-rather-than-english-is-desir][Link 1]],
[[https://emacs.stackexchange.com/questions/19602/org-calendar-change-date-language/19611#19611][Link 2]]
# ;; (setq calendar-week-start-day 1
# ;;           calendar-day-name-array ["Domenica" "Lunedì" "Martedì" "Mercoledì" 
# ;;                                    "Giovedì" "Venerdì" "Sabato"]
# ;;           calendar-month-name-array ["Gennaio" "Febbraio" "Marzo" "Aprile" "Maggio"
# ;;                                      "Giugno" "Luglio" "Agosto" "Settembre" 
# ;;                                      "Ottobre" "Novembre" "Dicembre"])
# ;; (setq calendar-week-start-day 1
# ;;       calendar-day-name-array["Sunday" "Monday" "Tuesday"
# ;; 			      "Wednesday" "Thursday" "Friday" "Saturday"]
# ;;       calendar-month-name-array ["January" "February" "March" "April" "May" "June"
# ;;    			         "July" "August" "September" "October" "November" "December"])
[[https://emacs.stackexchange.com/questions/50543/insert-date-using-a-calendar-where-other-language-rather-than-english-is-desir][Link 1]]
# ;;(let ((system-time-locale "en_GB.UTF-8")
# ;;      (time (org-read-date nil 'to-time nil "Date:  ")))
# ;;  (insert (format-time-string "(KW%W) (%A) %d. %B %Y" time)))(KW37) (poniedziałek) 12. września 2022
# ;; => (KW19) (Samstag) 18. Mai 2019
[[https://stackoverflow.com/questions/28913294/emacs-org-mode-language-of-time-stamps][Link 3]]
# ;; System locale to use for formatting time values.
# (setq system-time-locale "C")         ; Make sure that the weekdays in the
#                                       ; time stamps of your Org mode files and
#                                       ; in the agenda appear in English.


The best method I found working for my purposes is:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(setq system-time-locale "C")         ; Force Emacs to use English timestamps
#+end_src
It makes Emacs use English language and not the system localization language
when inserting weekdays abreviations in org-mode timestamps and in org-agenda.

***** DONE Calendar
Inserting the date from the calendar. 
Here's the way how one can insert date in org-mode by hitting ~C-c .~
choosing the day and hitting ~RET~.

The above shortcuts are listed in ~Scroll~ menu item which is visible in menu bar,
when you're in Calendar buffer.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Calendar ->
(defun calendar-insert-date ()
  "Capture the date at point, exit the Calendar, insert the date."
  (interactive)
  (seq-let (month day year) (save-match-data (calendar-cursor-to-date))
    (calendar-exit)
    (insert (format "%d-%02d-%02d" year month day))))
#+end_src
Warning! Here, instead of using:
#+begin_example
(define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)
#+end_example
it's better to define the action as

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(eval-after-load "calendar"
  `(progn
     (define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)))
;; <- Calendar
#+end_src

Otherwise, you may get ~calendar-mode-map is void~ error, 
if ~calendar-mode-map~ it's not loaded at the moment of executing the command ([[https://emacs.stackexchange.com/questions/3548/how-to-change-key-bindings-for-calendar-mode][Link]]).


Moving in calendar buffer is like follows:

| Move by  | Backward | Forward   |
|----------+----------+-----------|
| a day    | S-<left> | S-<right> |
| a week   | S-<up>   | S-<down>  |
| a month  | >        | <         |
| 3 months | M-v      | C-v       |
| a year   | 4 M-v    | 4 C-v     |
|----------+----------+-----------|


**** Easy moving between windows
It is managed by [[https://www.emacswiki.org/emacs/WindMove][WindMove package]] that is built-in in Emacs.
The default keybindings of this package is ~Shift arrow~, which sometimes
may be inconvenient (there are conflicts for example in org-mode, other 
packages that conflict with org are [[https://orgmode.org/manual/Conflicts.html][listed here]]).
That is why it's better to remap those keybindings to other 
combination (~Super-Key-<arrow>~ in the code below). 

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; windmove ->
;; Easy moving between windows
  
  ;; setting windmove-default-keybindings to super-<arrow> in order
  ;; to avoid org-mode conflicts
  (global-set-key (kbd "s-<left>")  'windmove-left)
  (global-set-key (kbd "s-<right>") 'windmove-right)
  (global-set-key (kbd "s-<up>")    'windmove-up)
  (global-set-key (kbd "s-<down>")  'windmove-down)
;; <- windmove
#+end_src

***** DEPRECATED Useful For Emacs < 27.1
(This section is deprecated. In Emacs 27.1 the package works ok without
the need of application of ~ignore-error-wrapper~ function.)

According to [[https://www.emacswiki.org/emacs/WindMove][package's wikipage]] there exist some problem with the package,
namely:
"When you run for instance windmove-left and there is no window on the left,
 windmove will throw exception (and if you have debug-on-error enabled) 
you will see Debugger complaining."

Proposed workaround requires ~cl~ package, which unfortunately is
[[https://github.com/kiwanami/emacs-epc/issues/35][deprecated in Emacs 27.1]] (The workaround worked in Emacs < 27).
With the use of 
[[https://emacs.stackexchange.com/questions/15189/alternative-to-lexical-let][this post]] and 
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][this part of emacs manual]] I sort of solved the problem and with the 
following code Emacs does not throw warnings or errors.

#+begin_src emacs-lisp 
;; windmove ->
;; Easy moving between windows
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  
  (eval-when-compile (require 'cl))
  (setq lexical-binding t)
  
  (defun ignore-error-wrapper (fn)
    "Funtion return new function that ignore errors.
     The function wraps a function with `ignore-errors' macro."
    (lexical-let ((fn fn))
      (lambda ()
        (interactive)
        (ignore-errors
          (funcall fn)))))
  
  ;; setting windmove-default-keybindings to super-<arrow> in order
  ;; to avoid org-mode conflicts
  (global-set-key (kbd "M-s-<left>") (ignore-error-wrapper 'windmove-left))
  (global-set-key (kbd "M-s-<right>") (ignore-error-wrapper 'windmove-right))
  (global-set-key (kbd "M-s-<up>") (ignore-error-wrapper 'windmove-up))
  (global-set-key (kbd "M-s-<down>") (ignore-error-wrapper 'windmove-down))
;; <- windmove
#+end_src




**** Easy windows resize
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Easy windows resize ->
  (define-key global-map (kbd "C-s-<left>") 'shrink-window-horizontally)
  (global-set-key        (kbd "C-s-<right>") 'enlarge-window-horizontally)
  (global-set-key        (kbd "C-s-<down>") 'shrink-window)
  (global-set-key        (kbd "C-s-<up>") 'enlarge-window)
;; <- Easy windows resize 
#+end_src


**** Column marker
In Emacs 27.1 in only needs to add the following lines in
your ~init.el~ to have properly working fill-column indicator in all buffers.
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html)
#+begin_src emacs-lisp
  ;; Fill column indicator -> 
(global-display-fill-column-indicator-mode)
  ;; <- Fill column indicator
#+end_src
This behaviour, however, may not be wanted in some buffers
(for example ipython command line
bufffer or octave command line buffer). In order to have fill-column-indicator
only for buffers of some type (code files, text files (org, doconce etc.) we
could add a hook for [[https://www.emacswiki.org/emacs/ProgMode][~prog-mode~]] and two relative modes ~text-mode~ and ~special-mode~.
Unfortunately, these modes do not contain all required modes
(~DocOnce-mode~ or ~org-mode~ are absent on the list of modes).
(The list of modes inherited after ~prog-mode~ and two other modes  can be viewed
with the use of the [[https://gist.github.com/davep/c16534ef91e9868aaff3d3658f880e4a][following function]]:
#+begin_src emacs-lisp
(defun list-prog-modes ()
  "List all programming modes known to this Emacs."
  (interactive)
  (with-help-window "*Programming Major Modes*"
    (mapatoms (lambda (f)
                (when (provided-mode-derived-p f 'prog-mode) ;; prog-mode or text-mode or special-mode
                  (princ f)
                  (princ "\n"))))))
#+end_src

Anyway, I decided on the following approach based on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html][this page]]:
- enable display-fill-column mode, which can be done by settings variable
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; Fill column indicator -> 
(setq display-fill-column-indicator-column 81)
#+end_src  
- write general function that can be hooked into mode
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(defun my-default-text-buffer-settings-mode-hook()
  (display-fill-column-indicator-mode 1)
  )
  ;; <- Fill column indicator
#+end_src  
- and add this hook per each required mode (this is done in [[Settings for modes]] section
  of this document 




***** COMMENT DEPRECATED
The vertical line for marking specific column width.
https://www.emacswiki.org/emacs/FillColumnIndicator
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Fill column indicator -> 
(require 'fill-column-indicator)
(setq fci-rule-column 81)
; (add-hook 'after-change-major-mode-hook 'fci-mode)
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
;; <- Fill column indicator
#+end_src

~fci-mode~ causes problems with proper display of the buffer when buffer widht
is less than ~fci-rule-column~ variable. [[https://emacs.stackexchange.com/questions/29113/how-to-disable-fill-column-indicator-fci-when-its-outside-the-window][Here's a stackexchange thread]]
on this, which includes a [[https://emacs.stackexchange.com/a/29125/30035][patch]] for this bug.
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Fill column indicator patch -> 
(defvar i42/fci-mode-suppressed nil)
(make-variable-buffer-local 'i42/fci-mode-suppressed)

(defun fci-width-workaround (frame)
  (let ((fci-enabled (symbol-value 'fci-mode))
        (fci-column (if fci-rule-column fci-rule-column fill-column))
        (current-window-list (window-list frame 'no-minibuf)))
    (dolist (window current-window-list)
      (with-selected-window window
        (if i42/fci-mode-suppressed
            (when (and (eq fci-enabled nil)
                       (< fci-column
                          (+ (window-width) (window-hscroll))))
              (setq i42/fci-mode-suppressed nil)
              (turn-on-fci-mode))
          ;; i42/fci-mode-suppressed == nil
          (when (and fci-enabled fci-column
                     (>= fci-column
                         (+ (window-width) (window-hscroll))))
            (setq i42/fci-mode-suppressed t)
            (turn-off-fci-mode)))))))
(add-hook 'window-size-change-functions 'fci-width-workaround)
;; <- Fill column indicator patch 
#+end_src


One of the posts (@Qudit) recommends using ~whitespace-mode~ instead of
~fci-column-mode~. I tested ~whitespace-mode~ however it does not look as
nice as I expected (perhaps it needs some additional configuration...).



**** Turning on/off beeping
Completely out of the blue my emacs started beeping. I guess it
had to be some keybinding I accidentally pressed but have no idea
what I did.
Anyway, to disable it we must [[https://stackoverflow.com/questions/10545437/how-to-disable-the-beep-in-emacs-on-windows][do the following]]:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; Setring alarms in Emacs -> 
(setq-default visible-bell t) 
(setq ring-bell-function 'ignore)
#+end_src


*** Completing 
ido/smex vs ivy/counsel/swiper vs helm 
**** ido-mode
# Temporarily deselected in order to test [[ivy-package]].

They say that ~ido~ is a [[https://www.masteringemacs.org/article/introduction-to-ido-mode][powerful package]] and you should have it enabled...
I'm not going to argue with that, yet I haven't studied much its capabilities.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; ido-mode ->
    (ido-mode 1)          
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)  ; ido-mode for file searching
  ;; <- ido-mode
#+end_src

**** smex
# Temporarily deselected in order to test [[ivy-package]].

This package is installed because I was inspired by some post. 
Just for tests.
https://github.com/nonsequitur/smex/

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; smex ->
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) 
  ;; <- smex
#+end_src

**** TODO Ivy (for testing) <<ivy-package>>
Furthermore, according to [[https://ruzkuku.com/emacs.d.html#org804158b][some other users]]
"Ivy is simpler (and faster) than Helm but more powerful than Ido".

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; *** Ivy
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; (setq ivy-wrap t)
  ;; (setq ivy-height 8)
  ;; (setq ivy-display-style 'fancy)
  ;; (setq ivy-use-virtual-buffers t)
  ;; (setq ivy-case-fold-search-default t)
  ;; (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  ;; (setq enable-recursive-minibuffers t)
  ;; (ivy-mode t)
#+end_src





**** TODO (TEMPORARILY COMMENTED OUT) Abbreviations (abbrev-mode)

- NOTE: This part of my init.el is temporarily commented out.
=abbrev-mode= can be useful, however it brings some trouble when working with more than
one language. I would like to come back here after having prepared
a piece of code that would recognize the language of the current document and 
based on this, change the autocorrection dictionary. Until then it's better
to manually trigger =abbrev-mode= per a document (in English), when you
really need it.


I've just discovered this mode and wanted to use it.
I'm not sure whether ~abbrev-mode~, ~yasnippet~ and ~company~
aren't substitute modes. [[https://emacs.stackexchange.com/questions/42556/best-pratice-advices-for-abbrev-vs-completion-vs-snippets][Well, in fact they partly are]].

- [[https://www.youtube.com/watch?v=AtdWuYImviw][Abbrev-mode movie tutorial]]
- [[https://www.youtube.com/watch?v=Holxu96YKrc&t=1s][Xah movie tutorial]]
- [[http://xahlee.info/emacs/emacs/emacs_abbrev_mode_tutorial.html][Xah page about abbrev]]
  
Emacs abbreviations are
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; ;; abbrev-mode ->
  ;;   (setq-default abbrev-mode t)          
  ;;   ; (read-abbrev-file "~/.emacs.d/abbrev_defs")
  ;;   (read-abbrev-file "~/.emacs.d/abbrev_defs_autocorrectionEN")
  ;;   (read-abbrev-file "~/.emacs.d/abbrev_defs_autocorrectionPL")  
  ;;   (read-abbrev-file "~/.emacs.d/abbrev_defs_cis")  
  ;;   (setq save-abbrevs t)  
  ;; ;; <- abbrev-mode
#+end_src

***** Useful commands
- C-x a - inverse-add-global-abbrev
- C-x a i l - inverse-add-global-abbrev
- C-x a i g - inverse-add-mode-abbrev
- unexpand-abbrev
- edit-abbrevs
- list-abbrevs
- kill-all-abbrevs
 

*** Autocomplete
~auto-complete~ vs ~company~

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; *** Auto-completing
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

**** Recently opened files
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Recently opened files ->
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 50)
  ;; in original emacs this binding is for "Find file read-only"
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
;; <- Recently opened files
#+end_src


*** Settings for modes 

It's good to have keybindings for the commands often used,
and it's good to have them enabled per specific mode.

How to define keybindings and key sequences:
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Sequences.html][Link 1]],
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html#Init-Rebinding][Link 2]].


How to define shortcuts for major modes:
[[http://xahlee.info/emacs/emacs/reclaim_keybindings.html][Link 1]],
[[https://docs.freebsd.org/en/books/developers-handbook/tools/#Emacs][Link 2]].

The problem that can be encountered in this point is that
we choose wrong (restricted) keybinding. In that case Emacs will
print an error message like:
#+begin_src emacs-lisp 
Key sequence M-x g starts with non-prefix key M-x
#+end_src

We can check the bindings that are restricted for the specific mode:
In the buffer with the mode enabled press ~C-h m~. New window with
information on the modes enabled for the buffer appears. You can
find the bindings tagged as =Prefix Command=. If you'd really like to use
other shortcut
# them
you need to rebind it ([[https://stackoverflow.com/questions/1024374/how-can-i-make-c-p-an-emacs-prefix-key-for-develperlysense][1]], [[https://stackoverflow.com/questions/9462111/emacs-error-key-sequence-m-x-g-starts-with-non-prefix-key-m-x][2]], [[https://emacs.stackexchange.com/questions/68328/general-el-error-key-sequence-starts-with-non-prefix-key][3]]).
   

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; *** Minor mode settings and keybindings
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

**** Emacs-Lisp mode
Be sure to set ~emacs-lisp-mode~ maps/hooks etc, not just ~lisp-mode-...~  otherwise
the shortcuts won't work.
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; Emacs-Lisp mode...
(defun my-emacs-lisp-mode-hook ()
(define-key emacs-lisp-mode-map (kbd "C-e b") 'eval-buffer)
(define-key emacs-lisp-mode-map (kbd "C-e e") 'eval-expression)
(define-key emacs-lisp-mode-map (kbd "C-e r") 'eval-region)  
)
#+end_src

**** Octave/Matlab mode
Based on [[https://wiki.octave.org/Emacs]].

Three files mentioned in the link must be already installed somewhere within
my ~Emacs 26.1~, because ~octve-mode~ command is available.
The only thing to do is to add ~octave-mode-hook~:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; Octave mode...
(defun my-octave-mode-hook()
  (define-key octave-mode-map (kbd "C-c C-s") 'octave-send-buffer)
  (define-key octave-mode-map (kbd "<f8>") 'octave-send-buffer)
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))
#+end_src

This code is compiled however it throws an error while writing the code
and expecting function syntax hints working:

=eldoc error: ( error Selecting deleted buffer)

Now =C-c TAB a= should invoke octave and run a buffer in it
(run =C-h m= or visit https://wiki.octave.org/Emacs to see the keybindings)


Define your own custom shortcuts to run specific script in matlab shell.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
; Matlab mode...
(defun my-matlab-mode-hook()
  (define-key matlab-mode-map (kbd "<f8>")
    '(lambda () (interactive)
      (matlab-shell-send-command "emacsrun('/home/mb/projects/TSdistributed/srcMTLB/main')" ))
     )
)
#+end_src

**** Python mode

The below code does not work as expected. Probably it'd be better to
apply the configuration given [[https://realpython.com/emacs-the-best-python-editor/#integration-with-jupyter-and-ipython][here]].

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; Python mode...

  (defun my-python-mode-hook()
             (lambda ()
               (setq python-shell-interpreter "python3") ))

#+end_src

**** Org mode
# Old approach 
# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
#   ;; Org mode...

#   (defun my-org-mode-hook()
# 	     (lambda ()
# 		(local-set-key (kbd "<f9>") "\C-x\C-s\C-c\C-e\C-a l p")
# 	       ;; (define-key org-mode-map (kbd "<f9>") "\C-x\C-s\C-c\C-e l p")
# 	       ))
#   ;; (global-set-key (kbd "<f9>") "\C-x\C-s\C-c\C-e l p")
# #+end_src


By default emacs waits until all exporting processes finish. It may take quite
a while in some situations (for example when exporting long document to LaTeX).
In order to make emacs work in asyncronous mode you need to toggle this
([[https://orgmode.org/manual/The-Export-Dispatcher.html][link 1]], [[https://superuser.com/questions/483554/org-export-run-in-background-how-to-troubleshoot][link 2]]).

One way is to do it each time when exporting: after pressing =C-c C-e= you
get =exporting menu= and in the third line you can see  =Async export= option
that can be enabled by pressin =C-a=. It is rather cumbersome.

To have this option toggled after launching emacs put the line below in your
init file.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; Org mode...
  (setq org-export-in-background t)
#+end_src

This setting has impact only when exporting via =org exporting menu=
(triggered by =C-c C-e=). When calling =org-latex-export-to-pdf= this
setting is not taken into account. Fortunately, this function has
optional parameter that can be set to obtain async behaviour.
All in all, the (almost) working solution can be written as a custom hook like this:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  (defun my-org-mode-hook()
    (define-key org-mode-map (kbd "<f9>")
      '(lambda () (interactive)
	(org-latex-export-to-pdf :async t)
	(org-beamer-export-to-pdf :async t)
	(org-odt-export-to-odt :async t)
	(org-odt-export-as-pdf :async t)
	)
       )  
  )
#+end_src

Why "almost"? Because this solution still won't work when exporting
files to Beamer. In order one needs to create appropriate
init file with settings for async export and
set ~org-export-async-init-file~ variable as path to this file (see 
[[org:export:async:beamer]]).

***** Setting ~org-export-async-init-file~ to avoid failure while exporting to Beamer
<<org:export:async:beamer>>

Org-beamer *async* exporter may fail because of lacking
=org-export-async-init-file= 
(as it is stated [[https://superuser.com/questions/738492/org-mode-8-async-export-process-fails][here]] and [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00463.html][here]]). 

In order to avoid this problem we can create a file with the
following content (note setting ~org-export-allow-bind-keywords~
[[https://www.mail-archive.com/emacs-orgmode@gnu.org/msg118389.html][variable]]):
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "myarch/async_init.el")
(require 'package)
(setq package-enable-at-startup nil)
(package-initialize)

(require 'org) 
(require 'ox)
(require 'cl)
(require 'ox-beamer)
(setq org-export-async-debug t)
(setq org-export-allow-bind-keywords t) ;; Important! In order to have #+BIND command working.
#+end_src

and set the variable ~org-export-async-init-file~.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  (setq org-export-async-init-file (expand-file-name "~/.emacs.d/myarch/async_init.el"))
  (setq org-export-async-debug t)
#+end_src

The important line is =(require 'ox-beamer)= !!! ([[https://lists.gnu.org/archive/html/emacs-orgmode/2018-05/msg00253.html][link]])

***** TODO async for odt documents still not working


**** Updating all of the hooks to make them aware of your mode settings
Now we need to update the hooks to 
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; Add all of the hooks...
;(add-hook 'c++-mode-hook 'my-c++-mode-hook)
;(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)
(add-hook 'octave-mode-hook 'my-octave-mode-hook)
(add-hook 'matlab-mode-hook 'my-matlab-mode-hook)
(add-hook 'python-mode-hook 'my-python-mode-hook)
(add-hook 'org-mode-hook 'my-org-mode-hook)

; (add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
;(add-hook 'perl-mode-hook 'my-perl-mode-hook)
#+end_src


**** Adding a hook to more than a one mode at once
https://emacs.stackexchange.com/questions/501/how-do-i-group-hooks
https://stackoverflow.com/questions/7398216/how-can-i-apply-a-hook-to-multiple-emacs-modes-at-once

In order to add a hook to more than one modes we need to use a function (taken from
[[https://stackoverflow.com/a/7400476/4649238][here]].

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; Add a hook to the list of modes
  (defun my-add-to-multiple-hooks (function hooks)
    (mapc (lambda (hook)
	    (add-hook hook function))
	  hooks))

  (defun my-turn-on-auto-fill ()
      my-default-text-buffer-settings-mode-hook  )

  (my-add-to-multiple-hooks
   'my-default-text-buffer-settings-mode-hook         ;; my-turn-on-auto-fill
   '(DocOnce-hook
     emacs-lisp-mode-hook
     matlab-mode-hook
     octave-mode-hook
     org-mode-hook
     python-mode-hook
   ))
#+end_src



**** Change font color for specific mode (eww)
Based on [[https://stackoverflow.com/questions/27973721/how-set-colors-for-a-specific-mode][this]].

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; Change font color for eww
(defun my-eww-mode-faces ()
  (face-remap-add-relative 'default '(:foreground "#BD8700")))

(add-hook 'eww-mode-hook 'my-eww-mode-faces)
#+end_src

*** Bibliography - citations
**** oc [org-citations]
***** Bibliography <<org-citations>>
# ____________________________________________________________________________78

In Org 9.6 we do not need explicitely load ~oc~ libraries.
Everything is covered in my post concerning bibliography and org-mode.

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  # ;; org citations
  # ;; (require 'oc)    ; probably not needed 
  # ;; (require 'oc-basic)
  # ;; (require 'oc-biblatex)
# #+end_src

Useful links:
- https://orgmode.org/manual/Citations.html
- https://kristofferbalintona.me/posts/202206141852/
- https://github.com/jkitchin/org-ref
- https://blog.tecosaur.com/tmio/2021-07-31-citations.html#fn.3
- https://emacs.stackexchange.com/questions/71817/how-to-export-bibliographies-with-org-mode
- https://www.reddit.com/r/emacs/comments/q4wa40/issues_with_new_orgcite_for_citations/
- https://nickgeorge.net/science/org-ref-setup/







**** citar (to check?)
     https://github.com/emacs-citar/citar

*** Org customization: org-mode, org-babel ...
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Org customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

**** Modyfing TODO-DONE sequence in org-mode
https://emacs.stackexchange.com/questions/31466/all-todos-how-to-set-different-colors-for-different-categories

https://orgmode.org/manual/TODO-Extensions.html
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; customized todo-done sequence
(setq org-todo-keywords
  '(
(sequence "TODO" "????" "POSTPONED" "|" "DONE")
(sequence "TODO" "ABANDONED"  "|" "DONE" "DEPRECATED")
))

(setq org-todo-keyword-faces
'(
("????" . (:foreground "red" :weight bold))
("POSTPONED" . (:foreground "blue" :weight bold))
("ABANDONED" . (:foreground "orange" :weight bold))
("DEPRECATED" . (:foreground "green" :weight bold))
)
)
#+end_src

WARNING! When changing this variables in the middle of the emacs
session you need to restart org-mode (=M-x org-mode-restart=) to
to have them enabled ([[https://lists.gnu.org/archive/html/emacs-orgmode/2010-11/msg00130.html][source]])!

Furthermore, it may be more convenient to have this tags set for
individual file (=#+TODO:=) ([[https://orgmode.org/manual/Per_002dfile-keywords.html][link]]).


**** Customizing font style for TODO-DONE keywords in latex export
https://stackoverflow.com/questions/36197545/org-mode-latex-export-making-todos-red


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; customized todo-done keywords in latex documents
(defun org-latex-format-headline-colored-keywords-function
    (todo _todo-type priority text tags _info)
  "Default format function for a headline.
See `org-latex-format-headline-function' for details."
  (concat
   ;; (and todo (format "{\\bfseries\\sffamily %s} " todo))
  (cond
   ((string= todo "TODO")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
   ((string= todo "????")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
   ((string= todo "POSTPONED")(and todo (format "{\\color{blue}\\bfseries\\sffamily %s} " todo)))
   ((string= todo "DONE")(and todo (format "{\\color{green}\\bfseries\\sffamily %s} " todo)))
   )
   (and priority (format "\\framebox{\\#%c} " priority))
   text
   (and tags
	(format "\\hfill{}\\textsc{%s}"
		(mapconcat #'org-latex--protect-text tags ":")))))

(setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)
#+end_src


**** Toggle between TODO-DONE keywords for all subnodes of the current node
Based on:
https://emacs.stackexchange.com/questions/52492/change-todo-keywords-of-all-nodes-in-an-orgmode-subtree-in-elisp

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(defun mb/org-toggle-org-keywords-right ()
    "Toggle between todo-done keywords for all subnodes of the current node."
    (interactive)
    (org-map-entries (lambda () (org-shiftright)) nil 'tree)
  )
(defun mb/org-toggle-org-keywords-left ()
    "Toggle between todo-done keywords for all subnodes of the current node."
    (interactive)
    (org-map-entries (lambda () (org-shiftleft)) nil 'tree)
  )
#+end_src

# **** Adding custom keywords to org-mode headline of the of the node and its subnodes
# -> Moved to RDITITcode.org

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
# (defun mb/org-add-keyword ()
#     "Add '{{{opt}}}' string to the headline of the node and all of its subnodes."
#     (interactive)
#     (org-map-entries (lambda () (concat "{{{opt}}}" (org-entry-get nil "ITEM")  )) nil 'tree)
#   )
# (defun mb/org-remove-keyword ()
#     "Remove '{{{opt}}}' string to the headline of the node and all of its subnodes."
#     (interactive)
#     (org-map-entries (lambda () (org-shiftleft)) nil 'tree)
#   )
# #+end_src


**** Org-agenda activation
 https://orgmode.org/manual/Activation.html#Activation

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; org-agenda activation
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

**** Org-special-block-extras
[[http://alhassy.com/org-special-block-extras/][Author's page]]

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; **** org-special-block-extras -> 
(add-hook #'org-mode-hook #'org-special-block-extras-mode)
;; <- **** org-special-block-extras 
#+end_src

**** Org-babel
To have org-babel enabled (execution of portions of code):

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

;; enabling org-babel
(org-babel-do-load-languages
 'org-babel-load-languages '(
			     (C . t)
			     (matlab . t)
			     ;;(perl . t)
			     (octave . t)
			     (org . t)
			     (python . t)
			     (shell . t)
 			     ))
			     
;; no question about confirmation of evaluating babel code block
(setq org-confirm-babel-evaluate nil)

#+end_src


**** Fix for Octave/Matlab org-babel - problems with matlab in org-babel
<<matlab-in-org-babel>>
http://gewhere.github.io/blog/2017/12/19/setup-matlab-in-emacs-and-babel-orgmode/

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

;; setup matlab in babel
(setq org-babel-default-header-args:matlab
  '((:results . "output") (:session . "*MATLAB*")))

#+end_src


In the current version of matlab org-babel there is a problem of
including input lines in the output of org-babel block.
The way to circumvent it is to use the approach suggested by
the user named =karthink= (=karthinks=?). I traced it starting
from the pages:
- https://www.reddit.com/r/emacs/comments/pufgce/matlab_mode/
- https://www.reddit.com/r/emacs/comments/fy98bs/orgbabels_matlab_session_output_is_malformed/

In the last link user =nakkaya=
refers to his/her solution of the problem,
however his/her link does not seem to include this solution.

I searched web for =karthink=, =matlab=, =emacs= appearances and
found the fix here:
https://github.com/karthink/.emacs.d/blob/master/plugins/ob-octave-fix.el

In the end I just downloaded the file and the inclusion of this package is
done in section [[ob-octave-fix]].

Remark: There exist at least two versions of the fix (I renamed
the one I already had to =ob-octave-fixOLDER.el=). Previous version
of the file didn't seem to resolve the problem.

Remark 2: In case of matlab code-block
newer version of =ob-octave-fix.el= depends on
=altmany='s ~export_fig~ function! I have been using it for a while
so I don't care anyway but in one may obtain errors when using
this library without ~export_fig~!

***** Export plots to png
https://lists.gnu.org/archive/html/emacs-orgmode/2017-08/msg00376.html

https://emacs.stackexchange.com/questions/54695/no-graphic-output-for-matlab-src-block-in-org-mode

***** Wrong formatting of matlab output's in org-babel

https://www.reddit.com/r/emacs/comments/fy98bs/orgbabels_matlab_session_output_is_malformed/







**** Set path to Python executable to work in org-babel code block
Pythonic org-babel code blocks like the one below:

#+begin_src python :results output
print("Hello world")
#+end_src
don't work out-of-the-box.
The similar problem for ~R~ can be found [[https://stackoverflow.com/questions/54007309/problem-org-babel-code-does-not-work-with-r][here]].

In order to fix the problem you need to
explicitely set the path to your
Python interpreter. 

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Python in org-babel
(setq org-babel-python-command "/bin/python3")
#+end_src

Two observations:
- ~python script.py~ executed in command line works ok
- there is no ~python~ comannd in ~/bin/~ directory.

An interesting discussion on python/python2/python3 related issues can be found [[https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take][here]].

Another interesting remark about python in org-babel is available [[https://emacs.stackexchange.com/a/41290][here]]. The following code block
#+begin_src org
  ,#+begin_src python
  ,print("Hello world")
  ,#+end_src
#+end_src

won't work as expected. You need to add ~results output~ to get string printed
by python in results block in org.

**** Tailoring org-mode to markdown export
When exporting to markdown I want to add some keywords in a special format to
the preamble of .md file.
[[https://emacs.stackexchange.com/questions/74505/how-can-i-add-specific-text-to-the-content-generated-by-org-mode-export-to-mark#74513][How to do that is described here.]]


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; **** org-to-markdown exporter customization  -> 

  (defun org-export-md-format-front-matter ()
    (let* ((kv-alist (org-element-map (org-element-parse-buffer 'greater-element)
			 'keyword
		       (lambda (keyword)
			 (cons (intern (downcase (org-element-property :key keyword)))
			       (org-element-property :value keyword)))))
	   (lines (mapcar (lambda (kw)
			    (let ((val (alist-get kw kv-alist)))
			      (format (pcase kw
					('author "%s: %s")
					((or 'tags 'title) "%s: '%s'")
					(_ "%s: %s"))
				      (downcase (symbol-name kw))
				      (pcase kw
					('date (substring val 1 -1))
					(_ val)))))
			  '(author date tags title))))
      (concat "---\n" (concat (mapconcat #'identity lines "\n")) "\n---")))

  (defun my/org-export-markdown-hook-function (backend)
      (if (eq backend 'md)
	  (insert (org-export-md-format-front-matter) "\n")))

#+end_src  

In the beginning the line below where hook is added was uncommented because
of my unawareness of how Emacs works.
Now I add the hook below per each org-file and this line is the cause
of unwanted behaviour that the required information (title, tags, etc.) is
added twice in exported ~md~ file. So I comment out the line below,
however in the free time I should supplement all the older posts with this line.
(TODO!)

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")   
  ;; This hook should be added per file in my org posts. Unfortunately, so far I don't know
  ;; how to do this.
  ;; (add-hook 'org-export-before-processing-hook #'my/org-export-markdown-hook-function)
#+end_src

Besides, in order to have markdown exporter options in menu appearing after
~C-c C-e~ you need to add 
([[https://stackoverflow.com/questions/22988092/emacs-org-mode-export-markdown/22990257#22990257][Link 1]], [[https://emacs.stackexchange.com/questions/4279/exporting-from-org-mode-to-markdown][Link 2]]):

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

(require 'ox-md nil t)

;; <- **** org-to-markdown exporter customization
#+end_src



**** Coloring ~code parts~ on export from org-mode to latex
Taken from [[https://emacs.stackexchange.com/questions/58993/how-color-code-on-export-from-org-mode-to-latex-pdf][here]]:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; colorting ~code~ on org to latex export
  (defun tmp-latex-code-filter (text backend info)
    "red inline code"
    (when (org-export-derived-backend-p backend 'latex) 
      (format "{\\color{red} %s }" text)))

  (defun tmp-f-strike-through (s backend info) "")
#+end_src


**** Miscellaneous oneliners
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; alphabetical ordered lists
(setq org-list-allow-alphabetical t)
#+end_src

**** TODO Asynchronous babel sessions
ob-comint.el

**** Org to latex nice org-babel source code formatting
# exporting command
The following instructions are based on
[[https://stackoverflow.com/questions/46438516/how-to-encapsualte-code-blocks-into-a-frame-when-exporting-to-pdf][this post]].
Nice tutorial is [[https://orgmode.org/worg/org-tutorials/org-latex-export.html][here]].


1. We need to have Python installed and ~Pygments~ package.
#+begin_src
  pip install Pygments
#+end_src
   
2. In org file preamble you need the line: ~#+LaTeX_HEADER: \usepackage{minted}~.

3. In init.el:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
;; org-to-latex exporter to have nice code formatting
  (setq org-latex-listings 'minted
     org-latex-packages-alist '(("" "minted"))
     org-latex-pdf-process
     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src


**** CDLatex installed in order to ease working with LaTeX in org-mode
The special mode ~org-cdlatex-mode~ is included in ~org~ package.
In order to have it working properly we need to install ~cdlatex~
itself. This can be done in
[[The main part of the installation script - list of the packages]].

Link to ~org-cdlatex-mode~ description:
http://doc.endlessparentheses.com/Fun/org-cdlatex-mode.html.

After launching ~org-cdlatex-mode~ you can insert latex environments
by typing:
 : C-c {


**** Reftex for managing references
[[https://www.gnu.org/software/emacs/manual/html_mono/reftex.html][~Reftex~]]
is preinstalled since Emacs 20.2, however in order to
have it working you need to [[https://emacs.stackexchange.com/questions/35179/reftex-complete-failed-with-wrong-type-argument-stringp-nil][install ~auctex~ package]]! 

Then you can turn on ~reftex~ per a buffer via:
~reftex-mode~.

At the beginning type:
 : C-c = (reftex-toc)
and choose ~r~ to generate a list of all labels, references in the
document.

From now on, every time you type ~C-c =~ ~reftex~ menu appears
on the top of the current buffer prompting the actions you can
take.

The problem with ~reftex~ is that it does not recognize
org-mode references added by =#+NAME:= =#+LABEL:= etc.

~org-ref~ [[https://emacs.stackexchange.com/questions/9767/can-reftex-be-used-with-org-label][is said to handle this]], so maybe in the future I will
return to this package. As for now I'm going to work with ~reftex~
and LaTeX tags.



**** Listing name tags of environments
Based on [[https://emacs.stackexchange.com/questions/77326/how-to-display-the-list-of-all-name-tags-is-org-mode-document][this page]].



#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; Managing org-mode #+NAME properties like in reftex-mode
  (defun my/get-name (e)
	(org-element-property :name e))

  (defun my/latex-environment-names ()
	(org-element-map (org-element-parse-buffer) 'latex-environment #'my/get-name))

  (defun my/report-latex-environment-names ()
      (interactive)
      (message (format "%S" (my/latex-environment-names))))

    (define-key org-mode-map (kbd "C-z z") #'my/report-latex-environment-names)
#+end_src









*** TODO Flyspell (TODO: dive deeper into the package and its capabilities)
https://ruzkuku.com/emacs.d.html#org804158b
https://www.emacswiki.org/emacs/FlySpell

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Flyspell 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
(flyspell-mode t)

    (defun flyspell-on-for-buffer-type ()
      "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
      (interactive)
      (if (not (symbol-value flyspell-mode)) ; if not already on
	(progn
	  (if (derived-mode-p 'prog-mode)
	    (progn
	      (message "Flyspell on (code)")
	      (flyspell-prog-mode))
	    ;; else
	    (progn
	      (message "Flyspell on (text)")
	      (flyspell-mode 1)))
	  ;; I tried putting (flyspell-buffer) here but it didn't seem to work
	  )))
    
    (defun flyspell-toggle ()
      "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
      (interactive)
      (if (symbol-value flyspell-mode)
	  (progn ; flyspell is on, turn it off
	    (message "Flyspell off")
	    (flyspell-mode -1))
	  ; else - flyspell is off, turn it on
	  (flyspell-on-for-buffer-type)))

 (global-set-key (kbd "C-c f") 'flyspell-toggle )

(defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "polish") "english" "polish")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
    
      (global-set-key (kbd "C-c s")   'fd-switch-dictionary)
#+end_src

*** Flymake/Flycheck

https://www.masteringemacs.org/article/spotlight-flycheck-a-flymake-replacement

In Emacs 27.1 ~flymake~ is said to be competitive with ~flycheck~ again.
It is built-in in Emacs. As for now, I'm gonna use ~flymake~.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Flymake
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(flymake-mode t)
#+end_src

*** Bash completions
Bash has usually very good command completion facilities, which aren't accessible by default from Emacs (except by running ~M-x term~). This package integrates them into regular commands such as ~shell-command~ and ~shell~.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Bash completions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bash-completion-setup)
#+end_src

# *** YASnippet
# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;; *** YASnippet
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# (yas-global-mode t) ; activate yasnippet
# (yas/initialize)
# #+end_src


*** PDF-Tools
Original repo: https://github.com/politza/pdf-tools.
Maintened fork: https://github.com/vedang/pdf-tools

http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html

After installation you need to activate the package by running:
~M-x pdf-tools-install~.

Something important is that this library doesn't play well with Emacs
=linum-mode=. The following lines of code will deactivate this mode
when rendering the .pdf:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Add this hook in order to run pdf-tools without a warning message.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+end_src


*** TRAMP

https://emacs.stackexchange.com/questions/57919/preview-images-and-pdfs-inside-a-ssh-terminal-session-or-inside-emacsclient-ses

->

https://emacs.stackexchange.com/questions/42252/run-local-command-on-remote-file-with-tramp

Something is wrong with this part of code and ~init.el~ is not
loading properly. 

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;;;; TRAMP
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;; Auxiliary function - useful for TRAMP editing
# (defun dired-do-local-command ()
#   (interactive)
#   (let* ((marked-files (dired-get-marked-files nil current-prefix-arg))
#          (local-tmp-files (mapcar #'file-local-copy marked-files))
#          (num-files (length local-tmp-files))
#          (default-directory temporary-file-directory)
#          (command (dired-read-shell-command "! on %s: " num-files marked-files)))
#     (dired-do-shell-command command num-files local-tmp-files)))

# (define-key dired-mode-map (kbd "\"") 'dired-do-local-command)
# #+end_src



*** General global shortcuts not restricted to specific package/mode
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Useful global shortcuts (text operations)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-d") 'delete-forward-char)    ; Backspace/Insert remapping
(global-set-key (kbd "C-S-d") 'delete-backward-char) 
; (global-set-key (kbd "M-S-d") 'backward-kill-word)
(global-set-key (kbd "C-c C-e s") 'mark-end-of-sentence)

(global-set-key (kbd "C-C C-e C-w C-w") 'eww-list-bookmarks) ; Open eww bookmarks
(defun mynet ()  (interactive) (eww-list-bookmarks))
#+end_src

**** Useful fast line-copying shortcut

***** Solution 

Based on idea presented [[https://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-Emacs][here]]. Smart but not recommended approach!
However it works for me.
You only need to remember that it may break down at any momement,
if you encounter a mode that rebinds one of the default keybindings used
in the sequence.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; fast copy-line-comment-it-and-paste-below
(global-set-key "\C-c\C-k"        "\C-a\C- \C-e\M-w\M-;\C-e\C-m\C-y")
#+end_src

The code below is not fully doing what it is meant to do. I don't have a time now
to correct it.
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; copy-selection-comment-it-and-paste-below (works ok provided selection is
;; performed from left to right....
(global-set-key "\C-c\C-l" "\M-w\M-;\C-e\C-m\C-y")
#+end_src

***** OLD: Solution 1 (NOT FULLY WORKING)
https://www.emacswiki.org/emacs/CopyingWholeLines

This solution only copies active line and moves the pointer to the next line

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
#+begin_src emacs-lisp 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; fast copy-line shortcut
  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
	Ease of use features:
	- Move to start of next line.
	- Appends the copy on sequential calls.
	- Use newline as last char even on the last line of the buffer.
	- If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
	  (end (line-end-position arg)))
      (when mark-active
	(if (> (point) (mark))
	    (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
	  (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
	  (kill-append (buffer-substring beg end) (< end beg))
	(kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

  (global-set-key "\C-c\C-k" 'copy-line)  
#+end_src

***** OLD: Solution 2 (NOT FULLY WORKING)
And even better solution because it also comments out the line and yanks
(pastes) copied text the line below. [[https://stackoverflow.com/a/23588908][Based on the post]].

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
#+begin_src emacs-lisp 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; fast copy-line-comment-and-paste-below
(defun copy-and-comment-region (beg end &optional arg)
  "Duplicate the region and comment-out the copied text.
See `comment-region' for behavior of a prefix arg."
  (interactive "r\nP")
  (copy-region-as-kill beg end)
  (goto-char end)
  (yank)
  (comment-region beg end arg))

(global-set-key "\C-c\C-v\C-k" 'copy-and-comment-region)
#+end_src

***** Solution 3 (NOT WORKING)
https://www.emacswiki.org/emacs/CopyWithoutSelection


*** ABANDONED Emailing in Emacs 
As a temporary workaround I decided to try [[emacs-everywhere]].

Basing on  [[https://www.reddit.com/r/emacs/comments/4rl0a9/email_in_emacs_i_want_to_but_wow_its_overwhelming/][this post]] I decided to perform configuration of email service 
within Emacs in three steps. Each of them takes care of one of the 
following problems
- fetching emails
- sending emails
- viewing emails.

**** Links that can be useful:
- https://www.reddit.com/r/emacs/comments/4rl0a9/email_in_emacs_i_want_to_but_wow_its_overwhelming/
- https://www.emacswiki.org/emacs/GettingMail
- [[https://www.jonatkinson.co.uk/posts/syncing-gmail-with-mbsync/]]
- https://isync.sourceforge.io
- https://brian-thompson.medium.com/setting-up-isync-mbsync-on-linux-e9fe10c692c0
- https://wiki.archlinux.org/title/isync
- https://www.maketecheasier.com/use-email-within-emacs/


**** ABANDONED Another approach: External Editor Revived -- a Thunderbird extension 
External Editor Revived is a Thunderbird extension that allows 
using external editor (vim/emacs/...) to edit your mails.

I had problems with installing necessary binary 
(https://github.com/Frederick888/external-editor-revived/releases/download/v0.6.0/ubuntu-latest-gnu-native-messaging-host-v0.6.0.zip)
due to lacking dependencies:
#+begin_example
./external-editor-revived: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.33' not found (required by ./external-editor-revived)
./external-editor-revived: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by ./external-editor-revived)
./external-editor-revived: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./external-editor-revived)
#+end_example
so I abandoned this idea at this stage.

*** Emacs-everywhere 
<<emacs-everywhere>>

Repository of the package and some basic information can be found
[[https://github.com/tecosaur/emacs-everywhere/][here]].

1. Install package ~emacs-everywhere~ from melpa ([[installation-script]])
2. Add system-wide shortcut for the command 
   #+begin_src sh :tangle  "~/binmb/emacs-everywhere.sh"
   #!/bin/bash
   # https://github.com/tecosaur/emacs-everywhere/
   
   emacsclient --eval "(emacs-everywhere)"
   #+end_src
   (I added =Ctrl+Alt+E= in custom shortcuts of KDE)
3. Run emacs daemon in the system (for example after hitting =Alt+F2=)  with:
   #+begin_src sh 
   emacs --daemon 
   #+end_src
   Warning!: In order not to restore files from previous session 
   (and avoid being asked for confirmation of loading some commands
   when files are restored) additional if statement is added to
   embrace ~(desktop-save-mode 1)~ at the beginning of the =init.el=.
   
4. Now you can invoke Emacs anywhere in the system with =Ctrl+Alt+E=.
   (If a piece of code is highlighted, it will be copied into Emacs
   buffer). After editing Emacs buffer press =C-c C-c= or =C-x 5 0= 
   to go back to the original programme. If you do not wish to paste 
   the buffer content into the original window, =C-c C-k= still
   copies the content to the clipboard, but never pastes.

5. The buffer opened within Emacs deamon instance has small fonts 
   despite the fact that font is set somewhere at the beginning of the 
   =init.el=. It is well-known problem:
   1. https://www.google.com/search?q=emacs+default+font+emacs+daemon
   2. https://emacs.stackexchange.com/questions/52063/emacsclient-gui-has-small-fonts
   3. https://github.com/doomemacs/doomemacs/issues/1223
   4. https://www.reddit.com/r/emacs/comments/pc189c/fonts_in_emacs_daemon_mode/
   5. https://www.reddit.com/r/emacs/comments/dwy299/how_to_set_fonts_in_daemon_mode_windows/

   I used the solution based on the one presented in the last link above,
   however the one presented in the second link seems to be simpler... 

   #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
   ;; setting up configuration for emacs-everywhere:
   ;; 1. font size
   ;(if (daemonp)
   ;(
   (defun my-after-frame (frame)
     (if (display-graphic-p frame)
         (progn
            (set-frame-font "liberation mono 11" nil t) )))

   (mapc 'my-after-frame (frame-list))
   (add-hook 'after-make-frame-functions 'my-after-frame)
   ;)
   ;) 
   #+end_src
   
 

**** Links that I found useful setting up this package:
- https://wikemacs.org/wiki/Command-line_startup_options
- https://ftp.gnu.org/old-gnu/Manuals/emacs-20.7/html_chapter/emacs_37.html
https://emacs.stackexchange.com/questions/3035/how-to-know-if-emacs-is-running-as-a-daemon
- https://stackoverflow.com/questions/45332003/how-can-i-detect-if-emacs-was-started-with-q 
- http://xahlee.info/emacs/emacs/elisp_command_line_argv.html

*** Load Emacs theme of your preference
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Emacs theme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src


**** Modus themes by Protesilaos Stavrou <<modus-theme>>
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; **** Modus theme by Protesilaos Stavrou
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
- [[https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/][Author's page]]
- [[https://www.youtube.com/watch?v=JJPokfFxyFo][Youtube's tutorial]]

~noconfirm~ flag needs to be added for two reasons.
First, without it we cannot run Emacs in batch mode from command line
(~emacs -batch -load ~/.emacs.d/init.el ...~). Second,... (I forgot the 
second reason).

# This is taken from modus manual. Do not tangle or export this code now.
#+begin_src emacs-lisp  :exports noen
;; (setq modus-themes-headings ; this is an alist: read the manual or its doc string
;;       '((1 . (overline background variable-pitch 1.3))
;;         (2 . (rainbow overline 1.1))
;;         (t . (semibold))) )
#+end_src


#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 

;; Add all your customizations prior to loading the themes
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil
      modus-themes-region '(bg-only no-extend))

;; Load the theme of your choice:
; (load-theme 'modus-operandi) ;; bright 
; (load-theme 'modus-vivendi) ;; dark

(load-theme 'modus-vivendi :noconfirm) 

(setq modus-themes-headings ; this is an alist: read the manual or its doc string
      '((1 . (rainbow overline background 1.4))
        (2 . (rainbow background 1.3))
	(3 . (rainbow bold 1.2))
        (t . (semilight 1.1))))

(setq modus-themes-scale-headings t)
(setq modus-themes-org-blocks 'tinted-background)
#+end_src

There are two types of modus themes: ~modus-operandi~ which is bright
and ~modus-vivendi~ which is dark one.
In order to ease switching between them it is convenient to define
custom keybinding [[https://emacs.stackexchange.com/a/48627][(details]]).

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; Auxiliary function to toggle betwen bright and dark theme
(defun toggle-theme ()
  (interactive)
  (if (eq (car custom-enabled-themes) 'modus-vivendi)
      (disable-theme 'modus-vivendi)
    (load-theme 'modus-vivendi :noconfirm)))
(global-set-key [f6] 'toggle-theme)
#+end_src

*** Manually downloaded packages

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Manually downloaded packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")

;; Set location for external packages.
(add-to-list 'load-path "~/.emacs.d/manual-download/")

;; doconce (M-x DocOnce) may be needed to activate it -> 
(load-file "~/.emacs.d/manual-download/.doconce-mode.el")


;; activating org-mode for doconce pub files:
;; https://github.com/doconce/publish/blob/master/doc/manual/publish-user-manual.pdf
(setq auto-mode-alist
      (append '(("\\.org$" . org-mode))
              '(("\\.pub$" . org-mode))
              auto-mode-alist))
;; <- doconce
#+end_src


Adding custom useful keybindings for doconce. As for now, this is added as
a global shortcut...

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
# ;; Doconce mode...
# (defun my-doconce-mode-hook ()
# (define-key doconce-mode-map (kbd "\C-c\C-j") (kbd "\C-c\C-j" "\C-k ====="))
# )
# #+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
(global-set-key "\C-c\C-j" "\C-k =====")
#+end_src


**** Sunrise - Norton Commander-like file browser
There are few packages to emulate Norton Commander experience in Emacs.
I tested ~mc.el~, ~nc.el~ and ~sunrise.el~. From these three only 
the last one turned out to be useful (or to run without errors).

https://www.emacswiki.org/emacs/Sunrise_Commander_Tips#h5o-1

https://pragmaticemacs.wordpress.com/2015/10/29/double-dired-with-sunrise-commander/

https://enzuru.medium.com/sunrise-commander-an-orthodox-file-manager-for-emacs-2f92fd08ac9e

- buttons extension for sunrise

 https://www.emacswiki.org/emacs/sunrise-x-buttons.el

https://pragmaticemacs.wordpress.com/2015/10/29/double-dired-with-sunrise-commander/

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; sunrise
(add-to-list 'load-path "~/.emacs.d/manual-download/sunrise")
(require 'sunrise)
(require 'sunrise-buttons)
(require 'sunrise-modeline)
(add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
#+end_src


**** Buffer-move - swapping buffers easily
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; buffer-move - swap buffers easily
(require 'buffer-move)
#+end_src

Now you can use commands:
~buf-move-up~
~buf-move-down~
~buf-move-left~
~buf-move-right~

or you can define keybindings as package documentation recommends 
(I guess it'll be used too seldom to waste keybinding for that):

#+begin_src
;; (global-set-key (kbd "<C-S-up>")     'buf-move-up)
;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+end_src




**** ob-octave-fix.el
<<ob-octave-fix>>

The discussion on this is thread can be found in section
[[matlab-in-org-babel]] so I here I just include the solution, namely
I load fixed library.

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  ;; octave/matlab-fix
  ;;;; (require 'ob-octave-fix nil t)    ; This is for older approach
  (require 'ob-octave-fix)
#+end_src


**** My own packages and settings

***** Custom org-special-block-extras definitions used globally in org-mode files

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; custom org-special-block-extras blocks
(add-to-list 'load-path "~/.emacs.d/myarch")
(require 'MB-org-special-block-extras)
#+end_src



**** Other packages
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;; [DEPRECATED] - use sunrise instead of this
;; midnight-commander emulation
;; (require 'mc)
#+end_src

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
;; org to ipython exporter
;;(use-package ox-ipynb
;  :load-path "~/.emacs.d/manual-download/ox-ipynb")
#+end_src


*** TODO The end
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** The ending
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
**** Workgroups (should be executed at the end of init.el) <<workgroups2-and-sessions>>
https://tuhdo.github.io/emacs-tutor3.html

~workgroups2~ is a fine package for managing session. To enable it and 
set the filepath for keeping sessions (default is ~/.emacs_workgroups~)
 put this in your ~init.el~:
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
(workgroups-mode 1)    ; session manager for emacs
(setq wg-session-file "~/.emacs.d/.emacs_workgroups") ; 
#+end_src

And then you can use the following commands to manage sessions:

- To save window&buffer layout as a work group:
~M-x wg-create-workgroup~ or
~C-c z C-c~

- To open an existing work group:
~M-x wg-open-workgroup~ or 
~C-c z C-v~

- To delete an existing work group:
~M-x wg-kill-workgroup~ or
~C-c z C-k~

There is one problem with ~workgroups2~ packages. It does not like with 
~desktop-save-mode~. When ~workgroups2~ is enabled ~desktop-save-mode~ 
does not restore the windows layout from the previous Emacs session, which
sucks.
I decided to stick to ~workgroups2~ and supply the needed functionality 
with the use of only this package. I did it by adding hooks:

#+begin_src emacs-lisp 
(add-hook 'kill-emacs-hook (
                     lambda () (wg-create-workgroup "currentsession" )))

(setq inhibit-startup-message t)

(add-hook 'window-setup-hook (
                       lambda () (wg-open-workgroup "currentsession")))
#+end_src

The line ~(setq inhibit-startup-message t)~ is added in order to prevent
Emacs splash screen to appear in one of the restored ~"currentsession"~ frames.

There is one problem with the code above. When running Emacs in batch mode like
this:

~emacs -batch -Q -load ~/.emacs.d/init.el~

(I have such a line of code in the makefile of this blog)
it asks in the command line about saving the "currentsession". It sucks.
As a workaround we can put those hooks inside if statement, which checks
whether Emacs was run in batch mode or not.
How to write an if statements is [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][here]].
In the code below I also use
[[https://emacs.stackexchange.com/questions/20603/how-to-know-if-emacs-is-running-in-batch-mode][~noninteractive~ variable]] which is true
if emacs is run in batch mode.

The code below somehow worked for a while. Then, out of a sudden it stopped.

#+begin_src emacs-lisp 
(if (not noninteractive)
    ( ; if Emacs is started in graphical environment
      (add-hook 'kill-emacs-hook (
                     lambda () (wg-create-workgroup "currentsession")))
      (setq inhibit-startup-message t)
      (add-hook 'window-setup-hook (
                       lambda () (wg-open-workgroup "currentsession")))
    )
   (
    ; if Emacs is run in batch mode - do not care about workgroups
   )
)
#+end_src

The problem was the lack of a special keyword ~progn~ as I found
[[https://stackoverflow.com/questions/912355/how-can-you-write-multiple-statements-in-elisp-if-statement][here]] ([[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequencing.html][Part of the manual about it]]). All in all, now everything seems
to be ok with the following lines:

#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") 
  (if (not noninteractive)
      ( ; if Emacs is started in graphical environment
        progn
	(add-hook 'kill-emacs-hook (
		       lambda () (wg-create-workgroup "currentsession")))
	(setq inhibit-startup-message t)
	(add-hook 'window-setup-hook (
			 lambda () (wg-open-workgroup "currentsession")))
      )
     (
      ; if Emacs is run in batch mode - do not care about workgroups
     )
  )
#+end_src



**** Last lines
#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el") :exports none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; *** Finishing touches
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src


**** DEPRECATED Restoring previous session
This section is deprecated in favour of [[workgroups2-and-sessions][~workgroups2 package~]].

This way of restoring session throws some warnings and needs additional
confirmations so I give it up. Simple ~(desktop-save-mode 1)~ which is 
included [[oneliners][in the beginning of ~init.el~]] works ok.

#+begin_src emacs-lisp 
;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      ;(desktop-load-default)   ; this is for Emacs 20-21
      (desktop-read)))

;; Indicate that this file has been read at least once
(setq first-time nil)
#+end_src

**** DEPRECATED Open some useful files in the background
I don't use this part of ~init.el~ anymore. I can get the similar
functionality by using ~recentf~ package or prepare a session
with required files opened in it.

# #+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
#+begin_src emacs-lisp
  ;;; Always have several files opened at startup
  ;; hint: https://stackoverflow.com/a/19284395/4649238
  (find-file "~/.emacs.d/init.el")
  (find-file "~/.emacs.d/install-packages.el")
  (find-file "~/.emacs.d/useful-shortcuts.org")
#+end_src

What's more, the commands above cause an unwanted behaviour when
evaluating ~init.el~. The last file in the list is opened in an active buffer.
I'd like to have those files opened "in background".
I found ~find-file-noselect~ function have this functionality,
but first: it is [[https://emacs.stackexchange.com/questions/2868/whats-wrong-with-find-file-noselect][not recommended way]] of doing this thing;
second: it is not present in Emacs 27.1 anyway.



#+begin_src emacs-lisp :tangle (concat (org-entry-get nil "PRJ-DIR" t) "init.el")
  ;; All done
  (message "All done in init.el.")
#+end_src

** Dependencies of the presented Emacs configuration <<dependencies-section>>:
The list of external applications that this script is dependent on:
- git
- LaTeX distribution (for org to latex exporters)

- xclip ([[emacs-everywhere]])
- xdotool ([[emacs-everywhere]])
- xprop ([[emacs-everywhere]]) - this is not a package but executable
- xwininfo ([[emacs-everywhere]]) - this is not a package but executable


** Some useful information and links:

*** What to do when Emacs is slow and laggy:
https://emacs.stackexchange.com/questions/5359/how-can-i-troubleshoot-a-very-slow-emacs

* COMMENT Local Variables

# Local Variables:
# eval: (add-hook 'org-export-before-processing-hook 
# 'my/org-export-markdown-hook-function nil t)
# End:
