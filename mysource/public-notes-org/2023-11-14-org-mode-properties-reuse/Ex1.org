* Section about src_elisp{(org-entry-get nil "Name")}
:PROPERTIES:
:Name:     J.S. Bach
:END:

* Section about src_elisp{(org-entry-get nil "Name")}
:PROPERTIES:
:Name:     W.A. Mozart
:END:

* Section about src_elisp{(+ 2 9)}
:PROPERTIES:
:Name:     W.A. Mozart
:END:

#+begin_src elisp :eval yes :results output :exports both

   (defun level1-headlines-filter ()
    (setq headline (org-entry-get nil "ITEM"))
    (setq allHeadlines (list headline) )    
    )

  (setq level1-headlines (org-map-entries #'level1-headlines-filter "LEVEL=1") )

  (defun my-export ()
    (while level1-headlines
      (setq tytul (nth 0 (car level1-headlines)) )
      ;; (print (concat "\n- " tytul  ))
      (print  (org-export-string-as tytul 'org t '(:with-toc nil)))

      (setq level1-headlines (cdr level1-headlines)))
    ;; (print "\n " )
    )


  ;; (print level1-headlines)
  (my-export)
#+end_src

#+RESULTS:
#+begin_example

(("Section about src_elisp{(org-entry-get nil \"Name\")}") ("Section about src_elisp{(org-entry-get nil \"Name\")}") ("Section about src_elisp{(+ 2 9)}"))

"Section about 
"

"Section about 
"

"Section about =11=
"
#+end_example


#+begin_src elisp :eval yes :results value :exports both
(org-export-string-as "This is src_elisp{(+ 4 3)}" 'org t '(:with-toc nil))
#+end_src

#+RESULTS:
: This is =7=
