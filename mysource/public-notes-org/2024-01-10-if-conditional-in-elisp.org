#+TITLE: If statement in elisp
#+DESCRIPTION: 
#+AUTHOR: cissic
#+DATE: <2024-01-10 Wed>
#+TAGS: elisp programming
# #+OPTIONS: toc:nil
#+OPTIONS: -:nil


* TODO {{{title}}}
:PROPERTIES:
:PRJ-DIR: ./2024-01-10-if-in-elisp/
:END:

** To remember
According to [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][emacs manual]] =if= statement has the following form:
#+begin_example
(if nil
    (print 'true)
  'very-false)
â‡’ very-false
#+end_example

It is important to remember that this statement has the form:
=if condition then-form else-forms ...= i.e.
if condition is fulfilled =then-form= is evaluated,
otherwise the rest of the lines inside external parenthesis.

This means that:
- if you have more than one commands to evaluate in case
condition is fulfilled they need to be embraced by parenthesis and
add a special keyword =progn= (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequencing.html][Sequencing in emacs manual]])!!!

- if you have more more than one commands to evaluate in case
condition is *not* fulfilled they *shouldn't be embraced* by parenthesis,
because otherwise they are treated as a function!
According to [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html][emacs manual]]:
''The else part of if is an example of an implicit progn. See Sequencing.''

*** Consider the following examples:

**** Working as intended
#+begin_src elisp :results output
  (if t
      (progn
       (print "TRUE: The condition ...")
       (print "... is fulfilled")
      )
       (print "FALSE: The condition ...")
       (print "... is not fulfilled")      
  )
#+end_src

#+RESULTS:
: 
: "TRUE: The condition ..."
: 
: "... is fulfilled"


#+begin_src elisp :results output
  (if nil
      (progn
       (print "TRUE: The condition ...")
       (print "... is fulfilled")
      )
       (print "FALSE: The condition ...")
       (print "... is not fulfilled")      
  )
#+end_src

#+RESULTS:
: 
: "FALSE: The condition ..."
: 
: "... is not fulfilled"


**** Unexpected behaviour
#+begin_src elisp :results output
  (if nil
       (print "TRUE: The condition ...")
       (print "... is fulfilled")
       (print "FALSE: The condition ...")
       (print "... is not fulfilled")      
  )
#+end_src

#+RESULTS:
: 
: "... is fulfilled"
: 
: "FALSE: The condition ..."
: 
: "... is not fulfilled"

#+begin_src elisp :results output
  (if t
       (print "TRUE: The condition ...")
       (print "... is fulfilled")
       (print "FALSE: The condition ...")
       (print "... is not fulfilled")      
  )
#+end_src

#+RESULTS:
: 
: "TRUE: The condition ..."


* COMMENT Local Variables

# Local Variables:
# eval: (setq org-latex-pdf-process
#  '("pdflatex -shell-escape -synctex=1 -interaction=nonstopmode -output-directory %o %f"
#    "pdflatex -shell-escape -synctex=1 -interaction=nonstopmode -output-directory %o %f"
#    "pdflatex -shell-escape -synctex=1 -interaction=nonstopmode -output-directory %o %f"))
# End:
 
