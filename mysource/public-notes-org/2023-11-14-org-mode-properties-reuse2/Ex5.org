* Section about src_elisp{(org-entry-get nil "Name")} :this:
:PROPERTIES:
:Name:     J.S. Bach
:END:

* Section about src_elisp{(org-entry-get nil "Composer")} from src_elisp{(org-entry-get nil "Town")} :this:
:PROPERTIES:
#+INCLUDE: myprop1.org
#+INCLUDE: myprop2.org
:END:

* Code
#+begin_src elisp :eval yes :results output :exports both

  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))


  (defun level1-headlines-filter ()
    (let (headline props)
      (setq headline (org-entry-get nil "ITEM"))
      (setq props (org-get-entry))
      (setq string 
	    (replace-in-string "\n" "" 
	    (replace-in-string "* " "" 
	    (replace-in-string "=" "" 
	    (org-export-string-as 
	      (concat 
		      "* " headline "\n" props) 
	      'org t '(:with-toc nil))))))
     ))

  (setq HEADLINES-PARSED (org-map-entries #'level1-headlines-filter "LEVEL=1+this") )

  (print HEADLINES-PARSED)

(print (org-collect-keywords '("TITLE")) )
(print (org-collect-keywords '("MYOWNKEYWORD")) )
(print (org-collect-keywords '("PROPERTY")) )

;; (print "AAA")
;; (print org-global-properties)

;; (setq p (org-element-parse-buffer))
;; (print p)

(org-collect-keywords '("MYOWNKEYWORD"))

(print (nth 1 (nth 0 (org-collect-keywords '("MYOWNKEYWORD")))))
(print (nth 1 (nth 0 (org-collect-keywords '("NEWKEY")))))
(print (nth 1 (nth 0 (org-collect-keywords '("NEWKEY") nil "globalProps.org"))))

#+end_src
