# ____________________________________________________________________________78

#+TITLE: Nice code formatting in org-babel
#+DESCRIPTION: 
#+AUTHOR: cissic
#+DATE: <2022-11-24 Thu>
#+TAGS: org-babel latex org-mode emacs
#+OPTIONS: toc:nil
#+OPTIONS: -:nil

* TODO {{{title}}}
:PROPERTIES:
:PRJ-DIR: ./2023-11-24-nice-code-format/
:END:

When exporting to LaTeX there are possible two packages for producing
pretty code listings: ~lstlistings~ and ~minted~ (UPDATE: In 2022 there
has appeared another exporting option called ~engraved~).

The drawback of ~lstlistings~ is that it is no longer maintened (at the time
of writing this), the drawback of ~minted~ is that depends on
on external resource (~minted~ uses ~Pygmentize~ which is a ~Python~ package,
so you need to have ~Python~ and ~Pygmentize~ package installed).

Links on the subject:
- https://orgmode.org/manual/Source-blocks-in-LaTeX-export.html
- https://emacs.stackexchange.com/questions/27982/export-code-blocks-in-org-mode-with-minted-environment
- https://tex.stackexchange.com/questions/200698/emacs-org-mode-minted-export-with-attr-latex
- 



Since ~mint~ seems to be a more robust and recommended way of dealing with
code listings, and furthermore Python is already installed on most
Linux distributions then we'll try to manage with it.

** Source blocks

The following instructions are based on
[[https://stackoverflow.com/questions/46438516/how-to-encapsualte-code-blocks-into-a-frame-when-exporting-to-pdf][this post]].
Nice tutorial is [[https://orgmode.org/worg/org-tutorials/org-latex-export.html][here]].

1. We need to have Python installed and ~Pygments~ package.
#+begin_src
  pip install Pygments
#+end_src
   
2. In org file preamble you need the line: ~#+LaTeX_HEADER: \usepackage{minted}~, but
   this is covered [[org-configuration-update][below]].

3. In ~init.el~ you could put something like this: <<org-configuration-update>>
#+begin_src emacs-lisp 
;;
  (setq org-latex-listings 'minted
     org-latex-packages-alist '(("" "minted"))
     org-latex-pdf-process
     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

However this will change the global settings of latex exporter.
Especially the triple pdflatex compiling takes a while when exporting, and I believe
it's better to have it enabled only per project that really needs that kind of treatment.

That is why I prefer have it done per local file:

#+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes

  ,#+TITLE: Some title
  ,#+AUTHOR: Some author
  ,#+LATEX_CLASS: article


  ,* Minted source highlighting
  :PROPERTIES:
  :PRJ-DIR: ./2023-11-24-nice-code-format/
  :END:  

  ,#+begin_src sh :exports both :tangle (concat (org-entry-get nil "PRJ-DIR" t) "") :mkdirp yes
  ls -la 
  ,#+end_src
#+end_src

When exporting code like in the example above we use ~minted~, but without any
special options. To see ~minted~ in work we can, for example, add ~#+ATTR_LATEX~ keyword
with the options for minted environment.

#+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes
  ,#+ATTR_LATEX: :options frame=single
  ,#+begin_src python :exports code :tangle (concat (org-entry-get nil "PRJ-DIR" t) "hello.py") :mkdirp yes 
     print("Hello world")
  ,#+end_src
#+end_src

To have this attribute always on we can, instead of using the following code
at the bottom of the file:

#+begin_src org
  
  ,# Local Variables:
  ,# eval: (setq org-latex-listings 'minted
  ,#  org-latex-packages-alist '(("" "minted"))
  ,#  org-latex-pdf-process
  ,#  '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ,#    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ,#    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  ,# End:

#+end_src


use something like this
#+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes

  # Local Variables:
  # eval: (setq org-latex-listings 'minted
  #  org-latex-packages-alist '(("" "minted"))
  #  org-latex-minted-options '(("bgcolor" "red") ("frame" "lines"))
  #  org-latex-pdf-process
  #  '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  #    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  #    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  # End:

#+end_src

A now you don't need to add option ~#+ATTR_LATEX~ per each source block.


** Result blocks

Another problem appears when you would like to have blocks of results
formatted.

In such a case the way to go is to define LaTeX environment
that would be based on minted environement.
Of course, it should be defined in org-file preamble.
Now, if we ~wrap~ the results of the block evaluation like in the example
below and export results as ~raw~ everything should work as expected.
After hitting ~C-c C-c~ when cursor is on code block, the results
block appears embraced with ~#+begin_resultsminted #+end_resultsminted~
keywords. This should be exported to pdf as defined
in ~resultsminted~ package.

#+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex2.org") :mkdirp yes

  ,#+TITLE: Some title
  ,#+AUTHOR: Some author
  ,#+LATEX_CLASS: article

  ,#+LaTeX_HEADER: \usepackage{color}
  ,#+LaTeX_HEADER: \definecolor{my-gray}{rgb}{0.9,0.9,0.9}
  ,#+LaTeX_HEADER: \newenvironment{resultsminted}
  ,#+LaTeX_HEADER: {\VerbatimEnvironment
  ,#+LaTeX_HEADER: \begin{minted}[
  ,#+LaTeX_HEADER: % linenos,
  ,#+LaTeX_HEADER: % fontfamily=courier,
  ,#+LaTeX_HEADER: % fontsize=\scriptsize,
  ,#+LaTeX_HEADER: % xleftmargin=21pt,
  ,#+LaTeX_HEADER: bgcolor=my-gray,
  ,#+LaTeX_HEADER: frame=single
  ,#+LaTeX_HEADER: ]{latex}}
  ,#+LaTeX_HEADER: {\end{minted}}



  ,* Minted source highlighting
  :PROPERTIES:
  :PRJ-DIR: ./2023-11-24-nice-code-format/
  :END:  

  ,#+begin_src sh :exports both :tangle (concat (org-entry-get nil "PRJ-DIR" t) "") :mkdirp yes :wrap resultsminted :results raw
    ls -la 
  ,#+end_src

  # Local Variables:
  # eval: (setq org-latex-listings 'minted
  #  org-latex-packages-alist '(("" "minted"))
  #  org-latex-minted-options '(("bgcolor" "red") ("frame" "lines"))
  #  org-latex-pdf-process
  #  '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  #    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  #    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  # End:

#+end_src





# Local Variables:
# eval: (add-hook 'org-export-before-processing-hook 
# 'my/org-export-markdown-hook-function nil t)
# End:
