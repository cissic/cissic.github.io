#+TITLE: How to tangle specific blocks of code
#+DESCRIPTION: 
#+AUTHOR: cissic 
#+DATE: <2024-01-27 Sat>
#+TAGS: 
#+OPTIONS: -:nil

* TODO How to tangle specific blocks of code
:PROPERTIES:
:PRJ-DIR: ./2024-01-27-How-to-tangle-specific-blocks-of-code/
:END:


** Problem description
Let's say we have the following org file:
#+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "script.org") :mkdirp yes :exports none :results none

  ,#+begin_src python :tangle "target1.py"
    a=11
  ,#+end_src

  ,#+begin_src python :tangle "target2.py"
    a=21
  ,#+end_src

  ,#+begin_src python :tangle "target1.py"
    b=12
  ,#+end_src

  ,#+begin_src python :tangle "target3.py"
    a=31
  ,#+end_src
#+end_src

Now, I want to tangle only those source blocks that are
meant to be tangled to =target1.py= and filter out those ones that are meant
to be tangled to the other files.

According to [[https://stackoverflow.com/questions/72270142/how-to-tangle-source-code-blocks-that-belong-to-a-specific-target-file][this]] answer one should use:
#+begin_src elisp
  (org-babel-tangle-file "myfile.org" "target1.py")
#+end_src

The problem is that this command does not work as required.
It tangles *all* the source blocks and creates all three files,
not just =target1.py=.


I'm using =emacs 29.1= and =org-mode 9.6.1=.

** Hints:
Basing on these threads:
- https://stackoverflow.com/a/28729080/4649238 and

- https://stackoverflow.com/questions/6156286/emacs-lisp-call-function-with-prefix-argument-programmatically



I came up with a partial solution, which utilized the fact that
=org-babel-tangle= with two prefix arguments (meaning =C-u C-u= before
=C-c C-v t=) tangles all the blocks that has the target file the same
as the current block of code.

#+begin_src elisp
  (defun org-babel-tangle-with-2-prefix-args ()
    (interactive)
    (setq current-prefix-arg '(16)) ; 4 for C-u, 16 for C-u C-u
    (call-interactively 'org-babel-tangle))
#+end_src

But how to do it by giving the _name_ of the target file?

** Solution

#+begin_src python :tangle "target1.py"
  a=11
#+end_src

#+begin_src python :tangle "target2.py"
  a=21
#+end_src

#+begin_src python :tangle "target1.py"
  b=12
#+end_src

#+begin_src python :tangle "target3.py"
  a=31
#+end_src


#+begin_src elisp
    (defun my/tangle-exclusively (source-file target-file)
      (let* ((visited (find-buffer-visiting file))
	 (buffer (or visited (find-file-noselect file))))

	
	)

      )


  (my/tangle-exclusively "2024-01-27-how-to-tangle-specific-blocks-of-code.org" "target
#+end_src
