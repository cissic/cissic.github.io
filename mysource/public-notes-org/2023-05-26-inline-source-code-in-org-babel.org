#+TITLE: Sourcing inline code blocks within the context of the named sessions in org-mode
#+DESCRIPTION: 
#+AUTHOR: cissic
#+DATE: <2023-05-26 Fri>
#+TAGS: org org-mode org-babel org-babel-session 
#+OPTIONS: toc:nil
#+OPTIONS: -:nil



* TODO {{{title}}}
:PROPERTIES:
:PRJ-DIR: ./2023-05-26-org-babel-inline/
:END:

** TODO Todos:
This post needs some amendments. In the free time I need to
think why exporting of all org blocks does not work when exporting to
pdf while it works when exporting to html.
Besides, while exporting the last block of inline code, it does not
show the same result as the result that is evaluated in Emacs buffer!


** How to include inline source blocks in org-babel

When working in ~org-mode~~org-babel~ you can stumble
upon a problem when
including inline blocks that should be run in the context of
a certain session.

Consider the following examples of the simplest inline sourcing:
# :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes

- This works:
  
  #+begin_src org  :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes
  src_python{x = 5; return(x+2)}{{{results(=7=)}}}
  #+end_src
  
  Returning:
  
  src_python{x = 5; return(x+2)}{{{results(=7=)}}}


- This does not work:
  #+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes
  src_python{x = 5; x+2}{{{results(=None=)}}} 
  #+end_src

  The results is:
  
  src_python{x = 5; x+2}{{{results(=None=)}}}

** Named sessions and inline source blocks
However when the inline code is meant to be executed in the context
of some session the opposite is true!

#+begin_src python :session *py_e* :tangle (concat (org-entry-get nil "PRJ-DIR" t) "example.py") :mkdirp yes :exports code :exports yes :wrap export latex :eval yes :results both
 a = 4
 b = 3
#+end_src

- The following 

  #+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes
    ,#+begin_src python :session *py_e* :tangle (concat (org-entry-get nil "PRJ-DIR" t) "example.py")     :mkdirp yes :exports code :exports yes :wrap export latex :eval yes :results both
       a = 4
       b = 3
    ,#+end_src

    src_python[:session *py_e*]{x = 5; return(x+a)} {{{results(==)}}}
  #+end_src
  
  returns:
  
  src_python[:session *py_e*]{x = 5; return(x+a)} {{{results(==)}}}

- While the following 
  #+begin_src org :tangle (concat (org-entry-get nil "PRJ-DIR" t) "Ex1.org") :mkdirp yes
  src_python[:session *py_e*]{x = 5; x+a} {{{results(=9=)}}}
  #+end_src

  gives
  
  src_python[:session *py_e*]{x = 5; x+a} {{{results(==)}}}






** Links that can be useful

- https://lists.gnu.org/archive/html/emacs-orgmode/2015-03/msg01001.html

# Local Variables:
# eval: (add-hook 'org-export-before-processing-hook 
# 'my/org-export-markdown-hook-function nil t)
# End:

